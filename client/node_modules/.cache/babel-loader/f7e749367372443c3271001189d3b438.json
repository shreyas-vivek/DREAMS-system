{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst {\n  DAGLink\n} = require('ipld-dag-pb');\n\nconst CID = require('cids');\n\nconst LRU = require('lru-cache');\n\nconst lruOptions = {\n  max: 128\n};\nconst cache = new LRU(lruOptions);\n\nmodule.exports = send => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    try {\n      cid = new CID(cid);\n    } catch (err) {\n      return callback(err);\n    }\n\n    const node = cache.get(cid.toString());\n\n    if (node) {\n      return callback(null, node.links);\n    }\n\n    send({\n      path: 'object/links',\n      args: cid.toString()\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let links = [];\n\n      if (result.Links) {\n        links = result.Links.map(l => {\n          return new DAGLink(l.Name, l.Size, l.Hash);\n        });\n      }\n\n      callback(null, links);\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","DAGLink","CID","LRU","lruOptions","max","cache","module","exports","send","cid","options","callback","err","node","get","toString","links","path","args","result","Links","map","l","Name","Size","Hash"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipfs-http-client/src/object/links.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst { DAGLink } = require('ipld-dag-pb')\nconst CID = require('cids')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = new LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    if (!options) {\n      options = {}\n    }\n\n    try {\n      cid = new CID(cid)\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(cid.toString())\n\n    if (node) {\n      return callback(null, node.links)\n    }\n\n    send({\n      path: 'object/links',\n      args: cid.toString()\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      let links = []\n\n      if (result.Links) {\n        links = result.Links.map((l) => {\n          return new DAGLink(l.Name, l.Size, l.Hash)\n        })\n      }\n      callback(null, links)\n    })\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAM;EAAEC;AAAF,IAAcD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMI,UAAU,GAAG;EACjBC,GAAG,EAAE;AADY,CAAnB;AAIA,MAAMC,KAAK,GAAG,IAAIH,GAAJ,CAAQC,UAAR,CAAd;;AAEAG,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,OAAOV,SAAS,CAAC,CAACW,GAAD,EAAMC,OAAN,EAAeC,QAAf,KAA4B;IAC3C,IAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;MACjCC,QAAQ,GAAGD,OAAX;MACAA,OAAO,GAAG,EAAV;IACD;;IACD,IAAI,CAACA,OAAL,EAAc;MACZA,OAAO,GAAG,EAAV;IACD;;IAED,IAAI;MACFD,GAAG,GAAG,IAAIR,GAAJ,CAAQQ,GAAR,CAAN;IACD,CAFD,CAEE,OAAOG,GAAP,EAAY;MACZ,OAAOD,QAAQ,CAACC,GAAD,CAAf;IACD;;IAED,MAAMC,IAAI,GAAGR,KAAK,CAACS,GAAN,CAAUL,GAAG,CAACM,QAAJ,EAAV,CAAb;;IAEA,IAAIF,IAAJ,EAAU;MACR,OAAOF,QAAQ,CAAC,IAAD,EAAOE,IAAI,CAACG,KAAZ,CAAf;IACD;;IAEDR,IAAI,CAAC;MACHS,IAAI,EAAE,cADH;MAEHC,IAAI,EAAET,GAAG,CAACM,QAAJ;IAFH,CAAD,EAGD,CAACH,GAAD,EAAMO,MAAN,KAAiB;MAClB,IAAIP,GAAJ,EAAS;QACP,OAAOD,QAAQ,CAACC,GAAD,CAAf;MACD;;MAED,IAAII,KAAK,GAAG,EAAZ;;MAEA,IAAIG,MAAM,CAACC,KAAX,EAAkB;QAChBJ,KAAK,GAAGG,MAAM,CAACC,KAAP,CAAaC,GAAb,CAAkBC,CAAD,IAAO;UAC9B,OAAO,IAAItB,OAAJ,CAAYsB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAAP;QACD,CAFO,CAAR;MAGD;;MACDd,QAAQ,CAAC,IAAD,EAAOK,KAAP,CAAR;IACD,CAhBG,CAAJ;EAiBD,CAtCe,CAAhB;AAuCD,CAxCD"},"metadata":{},"sourceType":"script"}