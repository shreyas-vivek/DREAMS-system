{"ast":null,"code":"'use strict';\n\nconst cbor = require('borc');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nconst CID = require('cids');\n\nconst isCircular = require('is-circular'); // https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\n\n\nconst CID_CBOR_TAG = 42;\n\nfunction tagCID(cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).buffer;\n  } else if (CID.isCID(cid)) {\n    cid = cid.buffer;\n  }\n\n  return new cbor.Tagged(CID_CBOR_TAG, Buffer.concat([Buffer.from('00', 'hex'), // thanks jdag\n  cid]));\n}\n\nfunction replaceCIDbyTAG(dagNode) {\n  let circular;\n\n  try {\n    circular = isCircular(dagNode);\n  } catch (e) {\n    circular = false;\n  }\n\n  if (circular) {\n    throw new Error('The object passed has circular references');\n  }\n\n  function transform(obj) {\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(transform);\n    }\n\n    if (CID.isCID(obj)) {\n      return tagCID(obj);\n    }\n\n    const keys = Object.keys(obj);\n\n    if (keys.length > 0) {\n      // Recursive transform\n      const out = {};\n      keys.forEach(key => {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key]);\n        } else {\n          out[key] = obj[key];\n        }\n      });\n      return out;\n    } else {\n      return obj;\n    }\n  }\n\n  return transform(dagNode);\n}\n\nexports = module.exports;\nexports.codec = multicodec.DAG_CBOR;\nexports.defaultHashAlg = multicodec.SHA2_256;\nconst defaultTags = {\n  [CID_CBOR_TAG]: val => {\n    // remove that 0\n    val = val.slice(1);\n    return new CID(val);\n  }\n};\nconst defaultSize = 64 * 1024; // current decoder heap size, 64 Kb\n\nlet currentSize = defaultSize;\nconst defaultMaxSize = 64 * 1024 * 1024; // max heap size when auto-growing, 64 Mb\n\nlet maxSize = defaultMaxSize;\nlet decoder = null;\n/**\n * Configure the underlying CBOR decoder.\n *\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\n */\n\nexports.configureDecoder = options => {\n  let tags = defaultTags;\n\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size;\n    }\n\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize;\n    }\n\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags);\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize;\n    maxSize = defaultMaxSize;\n  }\n\n  const decoderOptions = {\n    tags,\n    size: currentSize\n  };\n  decoder = new cbor.Decoder(decoderOptions); // borc edits opts.size in-place so we can capture _actual_ size\n\n  currentSize = decoderOptions.size;\n};\n\nexports.configureDecoder(); // Setup default cbor.Decoder\n\n/**\n * Serialize internal representation into a binary CBOR block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Buffer} - The encoded binary representation\n */\n\nexports.serialize = node => {\n  const nodeTagged = replaceCIDbyTAG(node);\n  const serialized = cbor.encode(nodeTagged);\n  return serialized;\n};\n/**\n * Deserialize CBOR block into the internal representation.\n *\n * @param {Buffer} data - Binary representation of a CBOR block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\n\n\nexports.deserialize = data => {\n  if (data.length > currentSize && data.length <= maxSize) {\n    exports.configureDecoder({\n      size: data.length\n    });\n  }\n\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder');\n  }\n\n  const deserialized = decoder.decodeFirst(data);\n  return deserialized;\n};\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\n\n\nexports.cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = {\n    cidVersion: 1,\n    hashAlg: exports.defaultHashAlg\n  };\n  const options = Object.assign(defaultOptions, userOptions);\n  const multihash = await multihashing(binaryBlob, options.hashAlg);\n  const codecName = multicodec.print[exports.codec];\n  const cid = new CID(options.cidVersion, codecName, multihash);\n  return cid;\n};","map":{"version":3,"names":["cbor","require","Buffer","multicodec","multihashing","CID","isCircular","CID_CBOR_TAG","tagCID","cid","buffer","isCID","Tagged","concat","from","replaceCIDbyTAG","dagNode","circular","e","Error","transform","obj","Uint8Array","Array","isArray","map","keys","Object","length","out","forEach","key","exports","module","codec","DAG_CBOR","defaultHashAlg","SHA2_256","defaultTags","val","slice","defaultSize","currentSize","defaultMaxSize","maxSize","decoder","configureDecoder","options","tags","size","assign","decoderOptions","Decoder","serialize","node","nodeTagged","serialized","encode","deserialize","data","deserialized","decodeFirst","binaryBlob","userOptions","defaultOptions","cidVersion","hashAlg","multihash","codecName","print"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipld-dag-cbor/src/util.js"],"sourcesContent":["'use strict'\n\nconst cbor = require('borc')\nconst { Buffer } = require('buffer')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst isCircular = require('is-circular')\n\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_CBOR_TAG = 42\n\nfunction tagCID (cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).buffer\n  } else if (CID.isCID(cid)) {\n    cid = cid.buffer\n  }\n\n  return new cbor.Tagged(CID_CBOR_TAG, Buffer.concat([\n    Buffer.from('00', 'hex'), // thanks jdag\n    cid\n  ]))\n}\n\nfunction replaceCIDbyTAG (dagNode) {\n  let circular\n  try {\n    circular = isCircular(dagNode)\n  } catch (e) {\n    circular = false\n  }\n  if (circular) {\n    throw new Error('The object passed has circular references')\n  }\n\n  function transform (obj) {\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\n      return obj\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(transform)\n    }\n\n    if (CID.isCID(obj)) {\n      return tagCID(obj)\n    }\n\n    const keys = Object.keys(obj)\n\n    if (keys.length > 0) {\n      // Recursive transform\n      const out = {}\n      keys.forEach((key) => {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key])\n        } else {\n          out[key] = obj[key]\n        }\n      })\n      return out\n    } else {\n      return obj\n    }\n  }\n\n  return transform(dagNode)\n}\n\nexports = module.exports\n\nexports.codec = multicodec.DAG_CBOR\nexports.defaultHashAlg = multicodec.SHA2_256\n\nconst defaultTags = {\n  [CID_CBOR_TAG]: (val) => {\n    // remove that 0\n    val = val.slice(1)\n    return new CID(val)\n  }\n}\nconst defaultSize = 64 * 1024 // current decoder heap size, 64 Kb\nlet currentSize = defaultSize\nconst defaultMaxSize = 64 * 1024 * 1024 // max heap size when auto-growing, 64 Mb\nlet maxSize = defaultMaxSize\nlet decoder = null\n\n/**\n * Configure the underlying CBOR decoder.\n *\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\n */\nexports.configureDecoder = (options) => {\n  let tags = defaultTags\n\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size\n    }\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize\n    }\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags)\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize\n    maxSize = defaultMaxSize\n  }\n\n  const decoderOptions = {\n    tags,\n    size: currentSize\n  }\n\n  decoder = new cbor.Decoder(decoderOptions)\n  // borc edits opts.size in-place so we can capture _actual_ size\n  currentSize = decoderOptions.size\n}\n\nexports.configureDecoder() // Setup default cbor.Decoder\n\n/**\n * Serialize internal representation into a binary CBOR block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Buffer} - The encoded binary representation\n */\nexports.serialize = (node) => {\n  const nodeTagged = replaceCIDbyTAG(node)\n  const serialized = cbor.encode(nodeTagged)\n\n  return serialized\n}\n\n/**\n * Deserialize CBOR block into the internal representation.\n *\n * @param {Buffer} data - Binary representation of a CBOR block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\nexports.deserialize = (data) => {\n  if (data.length > currentSize && data.length <= maxSize) {\n    exports.configureDecoder({ size: data.length })\n  }\n\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder')\n  }\n\n  const deserialized = decoder.decodeFirst(data)\n\n  return deserialized\n}\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nexports.cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = { cidVersion: 1, hashAlg: exports.defaultHashAlg }\n  const options = Object.assign(defaultOptions, userOptions)\n\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\n  const codecName = multicodec.print[exports.codec]\n  const cid = new CID(options.cidVersion, codecName, multihash)\n\n  return cid\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}