{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst promisify = require('promisify-es6');\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst SendOneFile = require('../utils/send-one-file');\n\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'dag/put');\n  return promisify((dagNode, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n\n    options = options || {};\n\n    if (options.hash) {\n      options.hashAlg = options.hash;\n      delete options.hash;\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'));\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'));\n    }\n\n    if (options.cid) {\n      let cid;\n\n      try {\n        cid = new CID(options.cid);\n      } catch (err) {\n        return callback(err);\n      }\n\n      options.format = cid.codec;\n      options.hashAlg = multihash.decode(cid.multihash).name;\n      delete options.cid;\n    }\n\n    const optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    };\n    options = Object.assign(optionDefaults, options);\n    let serialized;\n\n    try {\n      if (options.format === 'dag-cbor') {\n        serialized = dagCBOR.util.serialize(dagNode);\n      } else if (options.format === 'dag-pb') {\n        serialized = dagPB.util.serialize(dagNode);\n      } else {\n        // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n        serialized = dagNode;\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    const sendOptions = {\n      qs: {\n        hash: options.hashAlg,\n        format: options.format,\n        'input-enc': options.inputEnc\n      }\n    };\n    sendOneFile(serialized, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result['Cid']) {\n        return callback(null, new CID(result['Cid']['/']));\n      } else {\n        return callback(result);\n      }\n    });\n  });\n};","map":{"version":3,"names":["dagPB","require","dagCBOR","promisify","CID","multihash","SendOneFile","module","exports","send","sendOneFile","dagNode","options","callback","hash","hashAlg","cid","format","Error","err","codec","decode","name","optionDefaults","inputEnc","Object","assign","serialized","util","serialize","sendOptions","qs","result"],"sources":["C:/Users/Shreyas/Desktop/DREAMS/DMR-master/DREAMS-system/client/node_modules/ipfs-http-client/src/dag/put.js"],"sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst SendOneFile = require('../utils/send-one-file')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'dag/put')\n\n  return promisify((dagNode, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n    }\n\n    options = options || {}\n\n    if (options.hash) {\n      options.hashAlg = options.hash\n      delete options.hash\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'))\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'))\n    }\n\n    if (options.cid) {\n      let cid\n\n      try {\n        cid = new CID(options.cid)\n      } catch (err) {\n        return callback(err)\n      }\n\n      options.format = cid.codec\n      options.hashAlg = multihash.decode(cid.multihash).name\n      delete options.cid\n    }\n\n    const optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    }\n\n    options = Object.assign(optionDefaults, options)\n\n    let serialized\n\n    try {\n      if (options.format === 'dag-cbor') {\n        serialized = dagCBOR.util.serialize(dagNode)\n      } else if (options.format === 'dag-pb') {\n        serialized = dagPB.util.serialize(dagNode)\n      } else {\n        // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n        serialized = dagNode\n      }\n    } catch (err) {\n      return callback(err)\n    }\n\n    const sendOptions = {\n      qs: {\n        hash: options.hashAlg,\n        format: options.format,\n        'input-enc': options.inputEnc\n      }\n    }\n\n    sendOneFile(serialized, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n      if (result['Cid']) {\n        return callback(null, new CID(result['Cid']['/']))\n      } else {\n        return callback(result)\n      }\n    })\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}