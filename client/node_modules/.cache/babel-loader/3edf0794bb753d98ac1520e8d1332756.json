{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst assert = require('assert');\n\nconst withIs = require('class-is');\n\nconst visibility = require('../visibility'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nclass DAGLink {\n  constructor(name, size, cid) {\n    assert(cid, 'A link requires a cid to point to'); // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || '';\n    this._nameBuf = null;\n    this._size = size;\n    this._cid = new CID(cid); // Make sure we have a nice public API that can be used by an IPLD resolver\n\n    visibility.hidePrivateFields(this);\n    visibility.addEnumerableGetters(this, ['Hash', 'Name', 'Tsize']);\n  }\n\n  toString() {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  get Name() {\n    return this._name;\n  } // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n\n\n  get nameAsBuffer() {\n    if (this._nameBuf !== null) {\n      return this._nameBuf;\n    }\n\n    this._nameBuf = Buffer.from(this._name);\n    return this._nameBuf;\n  }\n\n  set Name(name) {\n    throw new Error(\"Can't set property: 'name' is immutable\");\n  }\n\n  get Tsize() {\n    return this._size;\n  }\n\n  set Tsize(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n  get Hash() {\n    return this._cid;\n  }\n\n  set Hash(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});\nexports.util = require('./util');","map":{"version":3,"names":["CID","require","assert","withIs","visibility","DAGLink","constructor","name","size","cid","_name","_nameBuf","_size","_cid","hidePrivateFields","addEnumerableGetters","toString","toBaseEncodedString","Name","Tsize","toJSON","_json","Object","freeze","Hash","assign","nameAsBuffer","Buffer","from","Error","exports","module","className","symbolName","util"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipld-dag-pb/src/dag-link/index.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst visibility = require('../visibility')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, cid) {\n    assert(cid, 'A link requires a cid to point to')\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._nameBuf = null\n    this._size = size\n    this._cid = new CID(cid)\n\n    // Make sure we have a nice public API that can be used by an IPLD resolver\n    visibility.hidePrivateFields(this)\n    visibility.addEnumerableGetters(this, ['Hash', 'Name', 'Tsize'])\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get Name () {\n    return this._name\n  }\n\n  // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n  get nameAsBuffer () {\n    if (this._nameBuf !== null) {\n      return this._nameBuf\n    }\n\n    this._nameBuf = Buffer.from(this._name)\n    return this._nameBuf\n  }\n\n  set Name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get Tsize () {\n    return this._size\n  }\n\n  set Tsize (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get Hash () {\n    return this._cid\n  }\n\n  set Hash (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\nexports.util = require('./util')\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,eAAD,CAA1B,C,CAEA;;;AACA,MAAMI,OAAN,CAAc;EACZC,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,GAAd,EAAmB;IAC5BP,MAAM,CAACO,GAAD,EAAM,mCAAN,CAAN,CAD4B,CAE5B;IACA;IACA;;IAEA,KAAKC,KAAL,GAAaH,IAAI,IAAI,EAArB;IACA,KAAKI,QAAL,GAAgB,IAAhB;IACA,KAAKC,KAAL,GAAaJ,IAAb;IACA,KAAKK,IAAL,GAAY,IAAIb,GAAJ,CAAQS,GAAR,CAAZ,CAT4B,CAW5B;;IACAL,UAAU,CAACU,iBAAX,CAA6B,IAA7B;IACAV,UAAU,CAACW,oBAAX,CAAgC,IAAhC,EAAsC,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CAAtC;EACD;;EAEDC,QAAQ,GAAI;IACV,OAAQ,YAAW,KAAKH,IAAL,CAAUI,mBAAV,EAAgC,aAAY,KAAKC,IAAK,YAAW,KAAKC,KAAM,GAA/F;EACD;;EAEDC,MAAM,GAAI;IACR,IAAI,CAAC,KAAKC,KAAV,EAAiB;MACf,KAAKA,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc;QACzBhB,IAAI,EAAE,KAAKW,IADc;QAEzBV,IAAI,EAAE,KAAKW,KAFc;QAGzBV,GAAG,EAAE,KAAKe,IAAL,CAAUP,mBAAV;MAHoB,CAAd,CAAb;IAKD;;IAED,OAAOK,MAAM,CAACG,MAAP,CAAc,EAAd,EAAkB,KAAKJ,KAAvB,CAAP;EACD;;EAEO,IAAJH,IAAI,GAAI;IACV,OAAO,KAAKR,KAAZ;EACD,CAnCW,CAqCZ;EACA;EACA;;;EACgB,IAAZgB,YAAY,GAAI;IAClB,IAAI,KAAKf,QAAL,KAAkB,IAAtB,EAA4B;MAC1B,OAAO,KAAKA,QAAZ;IACD;;IAED,KAAKA,QAAL,GAAgBgB,MAAM,CAACC,IAAP,CAAY,KAAKlB,KAAjB,CAAhB;IACA,OAAO,KAAKC,QAAZ;EACD;;EAEO,IAAJO,IAAI,CAAEX,IAAF,EAAQ;IACd,MAAM,IAAIsB,KAAJ,CAAU,yCAAV,CAAN;EACD;;EAEQ,IAALV,KAAK,GAAI;IACX,OAAO,KAAKP,KAAZ;EACD;;EAEQ,IAALO,KAAK,CAAEX,IAAF,EAAQ;IACf,MAAM,IAAIqB,KAAJ,CAAU,yCAAV,CAAN;EACD;;EAEO,IAAJL,IAAI,GAAI;IACV,OAAO,KAAKX,IAAZ;EACD;;EAEO,IAAJW,IAAI,CAAEf,GAAF,EAAO;IACb,MAAM,IAAIoB,KAAJ,CAAU,wCAAV,CAAN;EACD;;AAnEW;;AAsEdC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB3B,MAAM,CAACE,OAAD,EAAU;EAAE2B,SAAS,EAAE,SAAb;EAAwBC,UAAU,EAAE;AAApC,CAAV,CAAjC;AACAH,OAAO,CAACI,IAAR,GAAejC,OAAO,CAAC,QAAD,CAAtB"},"metadata":{},"sourceType":"script"}