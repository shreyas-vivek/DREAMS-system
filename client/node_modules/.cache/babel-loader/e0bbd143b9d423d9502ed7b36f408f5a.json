{"ast":null,"code":"'use strict';\n\nconst cleanCID = require('../utils/clean-cid');\n\nconst TarStreamToObjects = require('../utils/tar-stream-to-objects');\n\nconst v = require('is-ipfs');\n\nconst pull = require('pull-stream/pull');\n\nconst map = require('pull-stream/throughs/map');\n\nconst toPull = require('stream-to-pull-stream');\n\nconst deferred = require('pull-defer');\n\nmodule.exports = send => {\n  return (path, opts) => {\n    opts = opts || {};\n    const p = deferred.source();\n\n    try {\n      path = cleanCID(path);\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return p.end(err);\n      }\n    }\n\n    const request = {\n      path: 'get',\n      args: path,\n      qs: opts\n    }; // Convert the response stream to TarStream objects\n\n    send.andTransform(request, TarStreamToObjects, (err, stream) => {\n      if (err) {\n        return p.end(err);\n      }\n\n      p.resolve(pull(toPull.source(stream), map(file => {\n        const {\n          path,\n          content\n        } = file;\n        return content ? {\n          path,\n          content: toPull.source(content)\n        } : file;\n      })));\n    });\n    return p;\n  };\n};","map":{"version":3,"names":["cleanCID","require","TarStreamToObjects","v","pull","map","toPull","deferred","module","exports","send","path","opts","p","source","err","ipfsPath","end","request","args","qs","andTransform","stream","resolve","file","content"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipfs-http-client/src/files-regular/get-pull-stream.js"],"sourcesContent":["'use strict'\n\nconst cleanCID = require('../utils/clean-cid')\nconst TarStreamToObjects = require('../utils/tar-stream-to-objects')\nconst v = require('is-ipfs')\nconst pull = require('pull-stream/pull')\nconst map = require('pull-stream/throughs/map')\nconst toPull = require('stream-to-pull-stream')\nconst deferred = require('pull-defer')\n\nmodule.exports = (send) => {\n  return (path, opts) => {\n    opts = opts || {}\n\n    const p = deferred.source()\n\n    try {\n      path = cleanCID(path)\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return p.end(err)\n      }\n    }\n\n    const request = { path: 'get', args: path, qs: opts }\n\n    // Convert the response stream to TarStream objects\n    send.andTransform(request, TarStreamToObjects, (err, stream) => {\n      if (err) { return p.end(err) }\n\n      p.resolve(\n        pull(\n          toPull.source(stream),\n          map(file => {\n            const { path, content } = file\n            return content ? { path, content: toPull.source(content) } : file\n          })\n        )\n      )\n    })\n\n    return p\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,SAAD,CAAjB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,0BAAD,CAAnB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,uBAAD,CAAtB;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,YAAD,CAAxB;;AAEAO,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,OAAO,CAACC,IAAD,EAAOC,IAAP,KAAgB;IACrBA,IAAI,GAAGA,IAAI,IAAI,EAAf;IAEA,MAAMC,CAAC,GAAGN,QAAQ,CAACO,MAAT,EAAV;;IAEA,IAAI;MACFH,IAAI,GAAGX,QAAQ,CAACW,IAAD,CAAf;IACD,CAFD,CAEE,OAAOI,GAAP,EAAY;MACZ,IAAI,CAACZ,CAAC,CAACa,QAAF,CAAWL,IAAX,CAAL,EAAuB;QACrB,OAAOE,CAAC,CAACI,GAAF,CAAMF,GAAN,CAAP;MACD;IACF;;IAED,MAAMG,OAAO,GAAG;MAAEP,IAAI,EAAE,KAAR;MAAeQ,IAAI,EAAER,IAArB;MAA2BS,EAAE,EAAER;IAA/B,CAAhB,CAbqB,CAerB;;IACAF,IAAI,CAACW,YAAL,CAAkBH,OAAlB,EAA2BhB,kBAA3B,EAA+C,CAACa,GAAD,EAAMO,MAAN,KAAiB;MAC9D,IAAIP,GAAJ,EAAS;QAAE,OAAOF,CAAC,CAACI,GAAF,CAAMF,GAAN,CAAP;MAAmB;;MAE9BF,CAAC,CAACU,OAAF,CACEnB,IAAI,CACFE,MAAM,CAACQ,MAAP,CAAcQ,MAAd,CADE,EAEFjB,GAAG,CAACmB,IAAI,IAAI;QACV,MAAM;UAAEb,IAAF;UAAQc;QAAR,IAAoBD,IAA1B;QACA,OAAOC,OAAO,GAAG;UAAEd,IAAF;UAAQc,OAAO,EAAEnB,MAAM,CAACQ,MAAP,CAAcW,OAAd;QAAjB,CAAH,GAA+CD,IAA7D;MACD,CAHE,CAFD,CADN;IASD,CAZD;IAcA,OAAOX,CAAP;EACD,CA/BD;AAgCD,CAjCD"},"metadata":{},"sourceType":"script"}