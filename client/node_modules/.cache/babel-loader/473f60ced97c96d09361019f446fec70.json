{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst blake = require('blakejs');\n\nconst minB = 0xb201;\nconst minS = 0xb241;\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n};\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}; // Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n\nconst makeB2Hash = (size, hf) => async data => {\n  const ctx = hf.init(size, null);\n  hf.update(ctx, data);\n  return Buffer.from(hf.digest(ctx));\n};\n\nmodule.exports = table => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b);\n  }\n\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s);\n  }\n};","map":{"version":3,"names":["Buffer","require","blake","minB","minS","blake2b","init","blake2bInit","update","blake2bUpdate","digest","blake2bFinal","blake2s","blake2sInit","blake2sUpdate","blake2sFinal","makeB2Hash","size","hf","data","ctx","from","module","exports","table","i"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/blake.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst blake = require('blakejs')\n\nconst minB = 0xb201\nconst minS = 0xb241\n\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n}\n\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\nconst makeB2Hash = (size, hf) => async (data) => {\n  const ctx = hf.init(size, null)\n  hf.update(ctx, data)\n  return Buffer.from(hf.digest(ctx))\n}\n\nmodule.exports = (table) => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b)\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s)\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,IAAI,GAAG,MAAb;AACA,MAAMC,IAAI,GAAG,MAAb;AAEA,MAAMC,OAAO,GAAG;EACdC,IAAI,EAAEJ,KAAK,CAACK,WADE;EAEdC,MAAM,EAAEN,KAAK,CAACO,aAFA;EAGdC,MAAM,EAAER,KAAK,CAACS;AAHA,CAAhB;AAMA,MAAMC,OAAO,GAAG;EACdN,IAAI,EAAEJ,KAAK,CAACW,WADE;EAEdL,MAAM,EAAEN,KAAK,CAACY,aAFA;EAGdJ,MAAM,EAAER,KAAK,CAACa;AAHA,CAAhB,C,CAMA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc,MAAOC,IAAP,IAAgB;EAC/C,MAAMC,GAAG,GAAGF,EAAE,CAACZ,IAAH,CAAQW,IAAR,EAAc,IAAd,CAAZ;EACAC,EAAE,CAACV,MAAH,CAAUY,GAAV,EAAeD,IAAf;EACA,OAAOnB,MAAM,CAACqB,IAAP,CAAYH,EAAE,CAACR,MAAH,CAAUU,GAAV,CAAZ,CAAP;AACD,CAJD;;AAMAE,MAAM,CAACC,OAAP,GAAkBC,KAAD,IAAW;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;IAC3BD,KAAK,CAACrB,IAAI,GAAGsB,CAAR,CAAL,GAAkBT,UAAU,CAACS,CAAC,GAAG,CAAL,EAAQpB,OAAR,CAA5B;EACD;;EACD,KAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;IAC3BD,KAAK,CAACpB,IAAI,GAAGqB,CAAR,CAAL,GAAkBT,UAAU,CAACS,CAAC,GAAG,CAAL,EAAQb,OAAR,CAA5B;EACD;AACF,CAPD"},"metadata":{},"sourceType":"script"}