{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst Block = require('ipfs-block');\n\nconst CID = require('cids');\n\nconst streamToValue = require('../utils/stream-to-value');\n\nmodule.exports = send => {\n  return promisify((args, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    } // TODO this needs to be adjusted with the new go-ipfs http-api\n\n\n    let cid;\n\n    try {\n      if (CID.isCID(args)) {\n        cid = args;\n        args = cid.toBaseEncodedString();\n      } else if (Buffer.isBuffer(args)) {\n        cid = new CID(args);\n        args = cid.toBaseEncodedString();\n      } else if (typeof args === 'string') {\n        cid = new CID(args);\n      } else {\n        return callback(new Error('invalid argument'));\n      }\n    } catch (err) {\n      return callback(err);\n    } // Transform the response from Buffer or a Stream to a Block\n\n\n    const transform = (res, callback) => {\n      if (Buffer.isBuffer(res)) {\n        callback(null, new Block(res, cid)); // For empty blocks, concat-stream can't infer the encoding so we are\n        // passed back an empty array\n      } else if (Array.isArray(res) && res.length === 0) {\n        callback(null, new Block(Buffer.alloc(0), cid));\n      } else {\n        streamToValue(res, (err, data) => {\n          if (err) {\n            return callback(err);\n          } // For empty blocks, concat-stream can't infer the encoding so we are\n          // passed back an empty array\n\n\n          if (!data.length) data = Buffer.alloc(0);\n          callback(null, new Block(data, cid));\n        });\n      }\n    };\n\n    const request = {\n      path: 'block/get',\n      args: args,\n      qs: opts\n    };\n    send.andTransform(request, transform, callback);\n  });\n};","map":{"version":3,"names":["promisify","require","Block","CID","streamToValue","module","exports","send","args","opts","callback","cid","isCID","toBaseEncodedString","Buffer","isBuffer","Error","err","transform","res","Array","isArray","length","alloc","data","request","path","qs","andTransform"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipfs-http-client/src/block/get.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst Block = require('ipfs-block')\nconst CID = require('cids')\nconst streamToValue = require('../utils/stream-to-value')\n\nmodule.exports = (send) => {\n  return promisify((args, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    // TODO this needs to be adjusted with the new go-ipfs http-api\n    let cid\n    try {\n      if (CID.isCID(args)) {\n        cid = args\n        args = cid.toBaseEncodedString()\n      } else if (Buffer.isBuffer(args)) {\n        cid = new CID(args)\n        args = cid.toBaseEncodedString()\n      } else if (typeof args === 'string') {\n        cid = new CID(args)\n      } else {\n        return callback(new Error('invalid argument'))\n      }\n    } catch (err) {\n      return callback(err)\n    }\n\n    // Transform the response from Buffer or a Stream to a Block\n    const transform = (res, callback) => {\n      if (Buffer.isBuffer(res)) {\n        callback(null, new Block(res, cid))\n      // For empty blocks, concat-stream can't infer the encoding so we are\n      // passed back an empty array\n      } else if (Array.isArray(res) && res.length === 0) {\n        callback(null, new Block(Buffer.alloc(0), cid))\n      } else {\n        streamToValue(res, (err, data) => {\n          if (err) {\n            return callback(err)\n          }\n          // For empty blocks, concat-stream can't infer the encoding so we are\n          // passed back an empty array\n          if (!data.length) data = Buffer.alloc(0)\n          callback(null, new Block(data, cid))\n        })\n      }\n    }\n\n    const request = {\n      path: 'block/get',\n      args: args,\n      qs: opts\n    }\n\n    send.andTransform(request, transform, callback)\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,0BAAD,CAA7B;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,OAAOP,SAAS,CAAC,CAACQ,IAAD,EAAOC,IAAP,EAAaC,QAAb,KAA0B;IACzC,IAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;MAC9BC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD,CAJwC,CAMzC;;;IACA,IAAIE,GAAJ;;IACA,IAAI;MACF,IAAIR,GAAG,CAACS,KAAJ,CAAUJ,IAAV,CAAJ,EAAqB;QACnBG,GAAG,GAAGH,IAAN;QACAA,IAAI,GAAGG,GAAG,CAACE,mBAAJ,EAAP;MACD,CAHD,MAGO,IAAIC,MAAM,CAACC,QAAP,CAAgBP,IAAhB,CAAJ,EAA2B;QAChCG,GAAG,GAAG,IAAIR,GAAJ,CAAQK,IAAR,CAAN;QACAA,IAAI,GAAGG,GAAG,CAACE,mBAAJ,EAAP;MACD,CAHM,MAGA,IAAI,OAAOL,IAAP,KAAgB,QAApB,EAA8B;QACnCG,GAAG,GAAG,IAAIR,GAAJ,CAAQK,IAAR,CAAN;MACD,CAFM,MAEA;QACL,OAAOE,QAAQ,CAAC,IAAIM,KAAJ,CAAU,kBAAV,CAAD,CAAf;MACD;IACF,CAZD,CAYE,OAAOC,GAAP,EAAY;MACZ,OAAOP,QAAQ,CAACO,GAAD,CAAf;IACD,CAtBwC,CAwBzC;;;IACA,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMT,QAAN,KAAmB;MACnC,IAAII,MAAM,CAACC,QAAP,CAAgBI,GAAhB,CAAJ,EAA0B;QACxBT,QAAQ,CAAC,IAAD,EAAO,IAAIR,KAAJ,CAAUiB,GAAV,EAAeR,GAAf,CAAP,CAAR,CADwB,CAE1B;QACA;MACC,CAJD,MAIO,IAAIS,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsBA,GAAG,CAACG,MAAJ,KAAe,CAAzC,EAA4C;QACjDZ,QAAQ,CAAC,IAAD,EAAO,IAAIR,KAAJ,CAAUY,MAAM,CAACS,KAAP,CAAa,CAAb,CAAV,EAA2BZ,GAA3B,CAAP,CAAR;MACD,CAFM,MAEA;QACLP,aAAa,CAACe,GAAD,EAAM,CAACF,GAAD,EAAMO,IAAN,KAAe;UAChC,IAAIP,GAAJ,EAAS;YACP,OAAOP,QAAQ,CAACO,GAAD,CAAf;UACD,CAH+B,CAIhC;UACA;;;UACA,IAAI,CAACO,IAAI,CAACF,MAAV,EAAkBE,IAAI,GAAGV,MAAM,CAACS,KAAP,CAAa,CAAb,CAAP;UAClBb,QAAQ,CAAC,IAAD,EAAO,IAAIR,KAAJ,CAAUsB,IAAV,EAAgBb,GAAhB,CAAP,CAAR;QACD,CARY,CAAb;MASD;IACF,CAlBD;;IAoBA,MAAMc,OAAO,GAAG;MACdC,IAAI,EAAE,WADQ;MAEdlB,IAAI,EAAEA,IAFQ;MAGdmB,EAAE,EAAElB;IAHU,CAAhB;IAMAF,IAAI,CAACqB,YAAL,CAAkBH,OAAlB,EAA2BP,SAA3B,EAAsCR,QAAtC;EACD,CApDe,CAAhB;AAqDD,CAtDD"},"metadata":{},"sourceType":"script"}