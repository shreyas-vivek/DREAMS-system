{"ast":null,"code":"'use strict';\n\nconst ip = require('ip');\n\nconst isIp = require('is-ip');\n\nconst protocols = require('./protocols-table');\n\nconst bs58 = require('bs58');\n\nconst base32 = require('hi-base32');\n\nconst varint = require('varint');\n\nmodule.exports = Convert; // converts (serializes) addresses\n\nfunction Convert(proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a);\n  } else {\n    return Convert.toBuffer(proto, a);\n  }\n}\n\nConvert.toString = function convertToString(proto, buf) {\n  proto = protocols(proto);\n\n  switch (proto.code) {\n    case 4: // ipv4\n\n    case 41:\n      // ipv6\n      return buf2ip(buf);\n\n    case 6: // tcp\n\n    case 273: // udp\n\n    case 33: // dccp\n\n    case 132:\n      // sctp\n      return buf2port(buf);\n\n    case 53: // dns\n\n    case 54: // dns4\n\n    case 55: // dns6\n\n    case 56: // dnsaddr\n\n    case 400:\n      // unix\n      return buf2str(buf);\n\n    case 421:\n      // ipfs\n      return buf2mh(buf);\n\n    case 444:\n      // onion\n      return buf2onion(buf);\n\n    case 445:\n      // onion3\n      return buf2onion(buf);\n\n    default:\n      return buf.toString('hex');\n    // no clue. convert to hex\n  }\n};\n\nConvert.toBuffer = function convertToBuffer(proto, str) {\n  proto = protocols(proto);\n\n  switch (proto.code) {\n    case 4:\n      // ipv4\n      return ip2buf(str);\n\n    case 41:\n      // ipv6\n      return ip2buf(str);\n\n    case 6: // tcp\n\n    case 273: // udp\n\n    case 33: // dccp\n\n    case 132:\n      // sctp\n      return port2buf(parseInt(str, 10));\n\n    case 53: // dns\n\n    case 54: // dns4\n\n    case 55: // dns6\n\n    case 56: // dnsaddr\n\n    case 400:\n      // unix\n      return str2buf(str);\n\n    case 421:\n      // ipfs\n      return mh2buf(str);\n\n    case 444:\n      // onion\n      return onion2buf(str);\n\n    case 445:\n      // onion3\n      return onion32buf(str);\n\n    default:\n      return Buffer.from(str, 'hex');\n    // no clue. convert from hex\n  }\n};\n\nfunction ip2buf(ipString) {\n  if (!isIp(ipString)) {\n    throw new Error('invalid ip address');\n  }\n\n  return ip.toBuffer(ipString);\n}\n\nfunction buf2ip(ipBuff) {\n  const ipString = ip.toString(ipBuff);\n\n  if (!isIp(ipString)) {\n    throw new Error('invalid ip address');\n  }\n\n  return ipString;\n}\n\nfunction port2buf(port) {\n  const buf = Buffer.alloc(2);\n  buf.writeUInt16BE(port, 0);\n  return buf;\n}\n\nfunction buf2port(buf) {\n  return buf.readUInt16BE(0);\n}\n\nfunction str2buf(str) {\n  const buf = Buffer.from(str);\n  const size = Buffer.from(varint.encode(buf.length));\n  return Buffer.concat([size, buf]);\n}\n\nfunction buf2str(buf) {\n  const size = varint.decode(buf);\n  buf = buf.slice(varint.decode.bytes);\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n\n  return buf.toString();\n}\n\nfunction mh2buf(hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = Buffer.from(bs58.decode(hash));\n  const size = Buffer.from(varint.encode(mh.length));\n  return Buffer.concat([size, mh]);\n}\n\nfunction buf2mh(buf) {\n  const size = varint.decode(buf);\n  const address = buf.slice(varint.decode.bytes);\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n\n  return bs58.encode(address);\n}\n\nfunction onion2buf(str) {\n  const addr = str.split(':');\n\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.');\n  }\n\n  const buf = Buffer.from(base32.decode.asBytes(addr[0].toUpperCase())); // onion port number\n\n  const port = parseInt(addr[1], 10);\n\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n\n  const portBuf = port2buf(port);\n  return Buffer.concat([buf, portBuf]);\n}\n\nfunction onion32buf(str) {\n  const addr = str.split(':');\n\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.');\n  }\n\n  const buf = Buffer.from(base32.decode.asBytes(addr[0].toUpperCase())); // onion port number\n\n  const port = parseInt(addr[1], 10);\n\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n\n  const portBuf = port2buf(port);\n  return Buffer.concat([buf, portBuf]);\n}\n\nfunction buf2onion(buf) {\n  const addrBytes = buf.slice(0, buf.length - 2);\n  const portBytes = buf.slice(buf.length - 2);\n  const addr = base32.encode(addrBytes).toString('ascii').toLowerCase();\n  const port = buf2port(portBytes);\n  return addr + ':' + port;\n}","map":{"version":3,"names":["ip","require","isIp","protocols","bs58","base32","varint","module","exports","Convert","proto","a","Buffer","toString","toBuffer","convertToString","buf","code","buf2ip","buf2port","buf2str","buf2mh","buf2onion","convertToBuffer","str","ip2buf","port2buf","parseInt","str2buf","mh2buf","onion2buf","onion32buf","from","ipString","Error","ipBuff","port","alloc","writeUInt16BE","readUInt16BE","size","encode","length","concat","decode","slice","bytes","hash","mh","address","addr","split","asBytes","toUpperCase","portBuf","addrBytes","portBytes","toLowerCase"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/multiaddr/src/convert.js"],"sourcesContent":["'use strict'\n\nconst ip = require('ip')\nconst isIp = require('is-ip')\nconst protocols = require('./protocols-table')\nconst bs58 = require('bs58')\nconst base32 = require('hi-base32')\nconst varint = require('varint')\n\nmodule.exports = Convert\n\n// converts (serializes) addresses\nfunction Convert (proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a)\n  } else {\n    return Convert.toBuffer(proto, a)\n  }\n}\n\nConvert.toString = function convertToString (proto, buf) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return buf2ip(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return buf2port(buf)\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n      return buf2str(buf)\n\n    case 421: // ipfs\n      return buf2mh(buf)\n    case 444: // onion\n      return buf2onion(buf)\n    case 445: // onion3\n      return buf2onion(buf)\n    default:\n      return buf.toString('hex') // no clue. convert to hex\n  }\n}\n\nConvert.toBuffer = function convertToBuffer (proto, str) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n      return ip2buf(str)\n    case 41: // ipv6\n      return ip2buf(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2buf(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n      return str2buf(str)\n\n    case 421: // ipfs\n      return mh2buf(str)\n    case 444: // onion\n      return onion2buf(str)\n    case 445: // onion3\n      return onion32buf(str)\n    default:\n      return Buffer.from(str, 'hex') // no clue. convert from hex\n  }\n}\n\nfunction ip2buf (ipString) {\n  if (!isIp(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBuffer(ipString)\n}\n\nfunction buf2ip (ipBuff) {\n  const ipString = ip.toString(ipBuff)\n  if (!isIp(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\nfunction port2buf (port) {\n  const buf = Buffer.alloc(2)\n  buf.writeUInt16BE(port, 0)\n  return buf\n}\n\nfunction buf2port (buf) {\n  return buf.readUInt16BE(0)\n}\n\nfunction str2buf (str) {\n  const buf = Buffer.from(str)\n  const size = Buffer.from(varint.encode(buf.length))\n  return Buffer.concat([size, buf])\n}\n\nfunction buf2str (buf) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return buf.toString()\n}\n\nfunction mh2buf (hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = Buffer.from(bs58.decode(hash))\n  const size = Buffer.from(varint.encode(mh.length))\n  return Buffer.concat([size, mh])\n}\n\nfunction buf2mh (buf) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return bs58.encode(address)\n}\n\nfunction onion2buf (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')\n  }\n  const buf = Buffer.from(base32.decode.asBytes(addr[0].toUpperCase()))\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2buf(port)\n  return Buffer.concat([buf, portBuf])\n}\n\nfunction onion32buf (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')\n  }\n  const buf = Buffer.from(base32.decode.asBytes(addr[0].toUpperCase()))\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2buf(port)\n  return Buffer.concat([buf, portBuf])\n}\n\nfunction buf2onion (buf) {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = base32.encode(addrBytes).toString('ascii').toLowerCase()\n  const port = buf2port(portBytes)\n  return addr + ':' + port\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}