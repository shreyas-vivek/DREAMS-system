{"ast":null,"code":"/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst constants = require('./constants');\n/** @typedef {import(\"./base\")} Base */\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n\n  const enc = encoding(nameOrCode);\n  validEncode(enc.name, buf);\n  return Buffer.concat([enc.codeBuf, buf]);\n}\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\n\n\nfunction encode(nameOrCode, buf) {\n  const enc = encoding(nameOrCode);\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))]);\n}\n/**\n * Takes a buffer or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Buffer|string} data\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\n\n\nfunction decode(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n\n  const prefix = data[0]; // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase();\n  }\n\n  const enc = encoding(data[0]);\n  return Buffer.from(enc.decode(data.substring(1)));\n}\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} data\n * @returns {boolean}\n */\n\n\nfunction isEncoded(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  } // Ensure bufOrString is a string\n\n\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false;\n  }\n\n  try {\n    const enc = encoding(data[0]);\n    return enc.name;\n  } catch (err) {\n    return false;\n  }\n}\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Buffer} buf\n * @returns {undefined}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction validEncode(name, buf) {\n  const enc = encoding(name);\n  enc.decode(buf.toString());\n}\n/**\n * Get the encoding by name or code\n *\n * @param {string} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction encoding(nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode];\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`);\n  }\n}\n/**\n * Get encoding from data\n *\n * @param {string|Buffer} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction encodingFromData(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n\n  return encoding(data[0]);\n}\n\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nexports.names = Object.freeze(constants.names);\nexports.codes = Object.freeze(constants.codes);","map":{"version":3,"names":["Buffer","require","constants","multibase","nameOrCode","buf","Error","enc","encoding","validEncode","name","concat","codeBuf","encode","from","decode","data","isBuffer","toString","prefix","includes","toLowerCase","substring","isEncoded","Object","prototype","call","err","names","codes","encodingFromData","exports","module","freeze"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/is-ipfs/node_modules/multiaddr/node_modules/multihashes/node_modules/multibase/src/index.js"],"sourcesContent":["/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst constants = require('./constants')\n\n/** @typedef {import(\"./base\")} Base */\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer')\n  }\n  const enc = encoding(nameOrCode)\n  validEncode(enc.name, buf)\n  return Buffer.concat([enc.codeBuf, buf])\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))])\n}\n\n/**\n * Takes a buffer or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Buffer|string} data\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString()\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(data[0])\n  return Buffer.from(enc.decode(data.substring(1)))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} data\n * @returns {boolean}\n */\nfunction isEncoded (data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString()\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(data[0])\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Buffer} buf\n * @returns {undefined}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(buf.toString())\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {string} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode]\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Buffer} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString()\n  }\n\n  return encoding(data[0])\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nexports.names = Object.freeze(constants.names)\nexports.codes = Object.freeze(constants.codes)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}