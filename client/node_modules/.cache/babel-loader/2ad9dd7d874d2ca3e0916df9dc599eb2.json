{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst raw = require('ipld-raw');\n\nconst promisify = require('promisify-es6');\n\nconst CID = require('cids');\n\nconst waterfall = require('async/waterfall');\n\nconst block = require('../block');\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n};\n\nmodule.exports = send => {\n  return promisify((cid, path, options, callback) => {\n    if (typeof path === 'function') {\n      callback = path;\n      path = undefined;\n    }\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    path = path || '';\n\n    if (CID.isCID(cid)) {\n      cid = cid.toBaseEncodedString();\n    }\n\n    waterfall([cb => {\n      send({\n        path: 'dag/resolve',\n        args: cid + '/' + path,\n        qs: options\n      }, cb);\n    }, (resolved, cb) => {\n      block(send).get(new CID(resolved['Cid']['/']), (err, ipfsBlock) => {\n        cb(err, ipfsBlock, resolved['RemPath']);\n      });\n    }, (ipfsBlock, path, cb) => {\n      const dagResolver = resolvers[ipfsBlock.cid.codec];\n\n      if (!dagResolver) {\n        const error = new Error(`Missing IPLD format \"${ipfsBlock.cid.codec}\"`);\n        error.missingMulticodec = ipfsBlock.cid.codec;\n        return cb(error);\n      }\n\n      let res;\n\n      try {\n        res = dagResolver.resolve(ipfsBlock.data, path);\n      } catch (err) {\n        return cb(err);\n      }\n\n      cb(null, res);\n    }], callback);\n  });\n};","map":{"version":3,"names":["dagPB","require","dagCBOR","raw","promisify","CID","waterfall","block","resolvers","resolver","module","exports","send","cid","path","options","callback","undefined","isCID","toBaseEncodedString","cb","args","qs","resolved","get","err","ipfsBlock","dagResolver","codec","error","Error","missingMulticodec","res","resolve","data"],"sources":["C:/Users/Shreyas/Desktop/DREAMS/DMR-master/DREAMS-system/client/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst waterfall = require('async/waterfall')\nconst block = require('../block')\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n}\n\nmodule.exports = (send) => {\n  return promisify((cid, path, options, callback) => {\n    if (typeof path === 'function') {\n      callback = path\n      path = undefined\n    }\n\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n    path = path || ''\n\n    if (CID.isCID(cid)) {\n      cid = cid.toBaseEncodedString()\n    }\n\n    waterfall([\n      cb => {\n        send({\n          path: 'dag/resolve',\n          args: cid + '/' + path,\n          qs: options\n        }, cb)\n      },\n      (resolved, cb) => {\n        block(send).get(new CID(resolved['Cid']['/']), (err, ipfsBlock) => {\n          cb(err, ipfsBlock, resolved['RemPath'])\n        })\n      },\n      (ipfsBlock, path, cb) => {\n        const dagResolver = resolvers[ipfsBlock.cid.codec]\n\n        if (!dagResolver) {\n          const error = new Error(`Missing IPLD format \"${ipfsBlock.cid.codec}\"`)\n          error.missingMulticodec = ipfsBlock.cid.codec\n          return cb(error)\n        }\n\n        let res\n        try {\n          res = dagResolver.resolve(ipfsBlock.data, path)\n        } catch (err) {\n          return cb(err)\n        }\n\n        cb(null, res)\n      }\n    ], callback)\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,UAAD,CAArB;;AAEA,MAAMO,SAAS,GAAG;EAChB,YAAYN,OAAO,CAACO,QADJ;EAEhB,UAAUT,KAAK,CAACS,QAFA;EAGhBN,GAAG,EAAEA,GAAG,CAACM;AAHO,CAAlB;;AAMAC,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,OAAOR,SAAS,CAAC,CAACS,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,QAArB,KAAkC;IACjD,IAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;MAC9BE,QAAQ,GAAGF,IAAX;MACAA,IAAI,GAAGG,SAAP;IACD;;IAED,IAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;MACjCC,QAAQ,GAAGD,OAAX;MACAA,OAAO,GAAG,EAAV;IACD;;IAEDA,OAAO,GAAGA,OAAO,IAAI,EAArB;IACAD,IAAI,GAAGA,IAAI,IAAI,EAAf;;IAEA,IAAIT,GAAG,CAACa,KAAJ,CAAUL,GAAV,CAAJ,EAAoB;MAClBA,GAAG,GAAGA,GAAG,CAACM,mBAAJ,EAAN;IACD;;IAEDb,SAAS,CAAC,CACRc,EAAE,IAAI;MACJR,IAAI,CAAC;QACHE,IAAI,EAAE,aADH;QAEHO,IAAI,EAAER,GAAG,GAAG,GAAN,GAAYC,IAFf;QAGHQ,EAAE,EAAEP;MAHD,CAAD,EAIDK,EAJC,CAAJ;IAKD,CAPO,EAQR,CAACG,QAAD,EAAWH,EAAX,KAAkB;MAChBb,KAAK,CAACK,IAAD,CAAL,CAAYY,GAAZ,CAAgB,IAAInB,GAAJ,CAAQkB,QAAQ,CAAC,KAAD,CAAR,CAAgB,GAAhB,CAAR,CAAhB,EAA+C,CAACE,GAAD,EAAMC,SAAN,KAAoB;QACjEN,EAAE,CAACK,GAAD,EAAMC,SAAN,EAAiBH,QAAQ,CAAC,SAAD,CAAzB,CAAF;MACD,CAFD;IAGD,CAZO,EAaR,CAACG,SAAD,EAAYZ,IAAZ,EAAkBM,EAAlB,KAAyB;MACvB,MAAMO,WAAW,GAAGnB,SAAS,CAACkB,SAAS,CAACb,GAAV,CAAce,KAAf,CAA7B;;MAEA,IAAI,CAACD,WAAL,EAAkB;QAChB,MAAME,KAAK,GAAG,IAAIC,KAAJ,CAAW,wBAAuBJ,SAAS,CAACb,GAAV,CAAce,KAAM,GAAtD,CAAd;QACAC,KAAK,CAACE,iBAAN,GAA0BL,SAAS,CAACb,GAAV,CAAce,KAAxC;QACA,OAAOR,EAAE,CAACS,KAAD,CAAT;MACD;;MAED,IAAIG,GAAJ;;MACA,IAAI;QACFA,GAAG,GAAGL,WAAW,CAACM,OAAZ,CAAoBP,SAAS,CAACQ,IAA9B,EAAoCpB,IAApC,CAAN;MACD,CAFD,CAEE,OAAOW,GAAP,EAAY;QACZ,OAAOL,EAAE,CAACK,GAAD,CAAT;MACD;;MAEDL,EAAE,CAAC,IAAD,EAAOY,GAAP,CAAF;IACD,CA9BO,CAAD,EA+BNhB,QA/BM,CAAT;EAgCD,CAlDe,CAAhB;AAmDD,CApDD"},"metadata":{},"sourceType":"script"}