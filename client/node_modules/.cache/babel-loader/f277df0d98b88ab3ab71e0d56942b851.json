{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst EventEmitter = require('events');\n\nconst eos = require('end-of-stream');\n\nconst isNode = require('detect-node');\n\nconst setImmediate = require('async/setImmediate');\n\nconst PubsubMessageStream = require('./utils/pubsub-message-stream');\n\nconst stringlistToArray = require('./utils/stringlist-to-array');\n\nconst moduleConfig = require('./utils/module-config');\n\nconst NotSupportedError = () => new Error('pubsub is currently not supported when run in the browser');\n/* Public API */\n\n\nmodule.exports = arg => {\n  const send = moduleConfig(arg);\n  /* Internal subscriptions state and functions */\n\n  const ps = new EventEmitter();\n  const subscriptions = {};\n  ps.id = Math.random();\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      const defaultOptions = {\n        discover: false\n      };\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = defaultOptions;\n      }\n\n      if (!options) {\n        options = defaultOptions;\n      } // Throw an error if ran in the browsers\n\n\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError());\n        }\n\n        return setImmediate(() => callback(NotSupportedError()));\n      } // promisify doesn't work as we always pass a\n      // function as last argument (`handler`)\n\n\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          subscribe(topic, handler, options, err => {\n            if (err) {\n              return reject(err);\n            }\n\n            resolve();\n          });\n        });\n      }\n\n      subscribe(topic, handler, options, callback);\n    },\n    unsubscribe: (topic, handler, callback) => {\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError());\n        }\n\n        return setImmediate(() => callback(NotSupportedError()));\n      }\n\n      if (ps.listenerCount(topic) === 0 || !subscriptions[topic]) {\n        const err = new Error(`Not subscribed to '${topic}'`);\n\n        if (!callback) {\n          return Promise.reject(err);\n        }\n\n        return setImmediate(() => callback(err));\n      }\n\n      if (!handler && !callback) {\n        ps.removeAllListeners(topic);\n      } else {\n        ps.removeListener(topic, handler);\n      } // Drop the request once we are actually done\n\n\n      if (ps.listenerCount(topic) === 0) {\n        if (!callback) {\n          return new Promise((resolve, reject) => {\n            // When the response stream has ended, resolve the promise\n            eos(subscriptions[topic].res, err => {\n              // FIXME: Artificial timeout needed to ensure unsubscribed\n              setTimeout(() => {\n                if (err) return reject(err);\n                resolve();\n              });\n            });\n            subscriptions[topic].req.abort();\n            subscriptions[topic] = null;\n          });\n        } // When the response stream has ended, call the callback\n\n\n        eos(subscriptions[topic].res, err => {\n          // FIXME: Artificial timeout needed to ensure unsubscribed\n          setTimeout(() => callback(err));\n        });\n        subscriptions[topic].req.abort();\n        subscriptions[topic] = null;\n        return;\n      }\n\n      if (!callback) {\n        return Promise.resolve();\n      }\n\n      setImmediate(() => callback());\n    },\n    publish: promisify((topic, data, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n\n      if (!Buffer.isBuffer(data)) {\n        return callback(new Error('data must be a Buffer'));\n      }\n\n      const request = {\n        path: 'pubsub/pub',\n        args: [topic, data]\n      };\n      send(request, callback);\n    }),\n    ls: promisify(callback => {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n\n      const request = {\n        path: 'pubsub/ls'\n      };\n      send.andTransform(request, stringlistToArray, callback);\n    }),\n    peers: promisify((topic, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n\n      const request = {\n        path: 'pubsub/peers',\n        args: [topic]\n      };\n      send.andTransform(request, stringlistToArray, callback);\n    }),\n\n    setMaxListeners(n) {\n      return ps.setMaxListeners(n);\n    }\n\n  };\n\n  function subscribe(topic, handler, options, callback) {\n    ps.on(topic, handler);\n\n    if (subscriptions[topic]) {\n      // TODO: should a callback error be returned?\n      return callback();\n    } // Request params\n\n\n    const request = {\n      path: 'pubsub/sub',\n      args: [topic],\n      qs: {\n        discover: options.discover\n      }\n    }; // Start the request and transform the response\n    // stream to Pubsub messages stream\n\n    subscriptions[topic] = {};\n    subscriptions[topic].req = send.andTransform(request, PubsubMessageStream.from, (err, stream) => {\n      if (err) {\n        subscriptions[topic] = null;\n        ps.removeListener(topic, handler);\n        return callback(err);\n      }\n\n      subscriptions[topic].res = stream;\n      stream.on('data', msg => {\n        ps.emit(topic, msg);\n      });\n      stream.on('error', err => {\n        ps.emit('error', err);\n      });\n      eos(stream, err => {\n        if (err) {\n          ps.emit('error', err);\n        }\n\n        subscriptions[topic] = null;\n        ps.removeListener(topic, handler);\n      });\n      callback();\n    });\n  }\n};","map":{"version":3,"names":["promisify","require","EventEmitter","eos","isNode","setImmediate","PubsubMessageStream","stringlistToArray","moduleConfig","NotSupportedError","Error","module","exports","arg","send","ps","subscriptions","id","Math","random","subscribe","topic","handler","options","callback","defaultOptions","discover","Promise","reject","resolve","err","unsubscribe","listenerCount","removeAllListeners","removeListener","res","setTimeout","req","abort","publish","data","Buffer","isBuffer","request","path","args","ls","andTransform","peers","setMaxListeners","n","on","qs","from","stream","msg","emit"],"sources":["C:/Users/Shreyas/Desktop/DREAMS/DMR-master/DREAMS-system/client/node_modules/ipfs-http-client/src/pubsub.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst EventEmitter = require('events')\nconst eos = require('end-of-stream')\nconst isNode = require('detect-node')\nconst setImmediate = require('async/setImmediate')\nconst PubsubMessageStream = require('./utils/pubsub-message-stream')\nconst stringlistToArray = require('./utils/stringlist-to-array')\nconst moduleConfig = require('./utils/module-config')\n\nconst NotSupportedError = () => new Error('pubsub is currently not supported when run in the browser')\n\n/* Public API */\nmodule.exports = (arg) => {\n  const send = moduleConfig(arg)\n\n  /* Internal subscriptions state and functions */\n  const ps = new EventEmitter()\n  const subscriptions = {}\n  ps.id = Math.random()\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      const defaultOptions = {\n        discover: false\n      }\n\n      if (typeof options === 'function') {\n        callback = options\n        options = defaultOptions\n      }\n\n      if (!options) {\n        options = defaultOptions\n      }\n\n      // Throw an error if ran in the browsers\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError())\n        }\n\n        return setImmediate(() => callback(NotSupportedError()))\n      }\n\n      // promisify doesn't work as we always pass a\n      // function as last argument (`handler`)\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          subscribe(topic, handler, options, (err) => {\n            if (err) {\n              return reject(err)\n            }\n            resolve()\n          })\n        })\n      }\n\n      subscribe(topic, handler, options, callback)\n    },\n    unsubscribe: (topic, handler, callback) => {\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError())\n        }\n\n        return setImmediate(() => callback(NotSupportedError()))\n      }\n\n      if (ps.listenerCount(topic) === 0 || !subscriptions[topic]) {\n        const err = new Error(`Not subscribed to '${topic}'`)\n\n        if (!callback) {\n          return Promise.reject(err)\n        }\n\n        return setImmediate(() => callback(err))\n      }\n\n      if (!handler && !callback) {\n        ps.removeAllListeners(topic)\n      } else {\n        ps.removeListener(topic, handler)\n      }\n\n      // Drop the request once we are actually done\n      if (ps.listenerCount(topic) === 0) {\n        if (!callback) {\n          return new Promise((resolve, reject) => {\n            // When the response stream has ended, resolve the promise\n            eos(subscriptions[topic].res, (err) => {\n              // FIXME: Artificial timeout needed to ensure unsubscribed\n              setTimeout(() => {\n                if (err) return reject(err)\n                resolve()\n              })\n            })\n            subscriptions[topic].req.abort()\n            subscriptions[topic] = null\n          })\n        }\n\n        // When the response stream has ended, call the callback\n        eos(subscriptions[topic].res, (err) => {\n          // FIXME: Artificial timeout needed to ensure unsubscribed\n          setTimeout(() => callback(err))\n        })\n        subscriptions[topic].req.abort()\n        subscriptions[topic] = null\n        return\n      }\n\n      if (!callback) {\n        return Promise.resolve()\n      }\n\n      setImmediate(() => callback())\n    },\n    publish: promisify((topic, data, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      if (!Buffer.isBuffer(data)) {\n        return callback(new Error('data must be a Buffer'))\n      }\n\n      const request = {\n        path: 'pubsub/pub',\n        args: [topic, data]\n      }\n\n      send(request, callback)\n    }),\n    ls: promisify((callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      const request = {\n        path: 'pubsub/ls'\n      }\n\n      send.andTransform(request, stringlistToArray, callback)\n    }),\n    peers: promisify((topic, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      const request = {\n        path: 'pubsub/peers',\n        args: [topic]\n      }\n\n      send.andTransform(request, stringlistToArray, callback)\n    }),\n    setMaxListeners (n) {\n      return ps.setMaxListeners(n)\n    }\n  }\n\n  function subscribe (topic, handler, options, callback) {\n    ps.on(topic, handler)\n\n    if (subscriptions[topic]) {\n      // TODO: should a callback error be returned?\n      return callback()\n    }\n\n    // Request params\n    const request = {\n      path: 'pubsub/sub',\n      args: [topic],\n      qs: {\n        discover: options.discover\n      }\n    }\n\n    // Start the request and transform the response\n    // stream to Pubsub messages stream\n    subscriptions[topic] = {}\n    subscriptions[topic].req = send.andTransform(request, PubsubMessageStream.from, (err, stream) => {\n      if (err) {\n        subscriptions[topic] = null\n        ps.removeListener(topic, handler)\n        return callback(err)\n      }\n\n      subscriptions[topic].res = stream\n\n      stream.on('data', (msg) => {\n        ps.emit(topic, msg)\n      })\n\n      stream.on('error', (err) => {\n        ps.emit('error', err)\n      })\n\n      eos(stream, (err) => {\n        if (err) {\n          ps.emit('error', err)\n        }\n\n        subscriptions[topic] = null\n        ps.removeListener(topic, handler)\n      })\n\n      callback()\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}