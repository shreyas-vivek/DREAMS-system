{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nmodule.exports = send => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const handleResult = (res, callback) => {\n      const peerIds = res.map(r => new PeerInfo(PeerId.createFromB58String(r.ID)));\n      callback(null, peerIds);\n    };\n\n    send({\n      path: 'dht/query',\n      args: peerId,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","streamToValueWithTransformer","PeerId","PeerInfo","module","exports","send","peerId","opts","callback","handleResult","res","peerIds","map","r","createFromB58String","ID","path","args","qs","err","result"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\n\nmodule.exports = (send) => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      const peerIds = res.map((r) => (new PeerInfo(PeerId.createFromB58String(r.ID))))\n\n      callback(null, peerIds)\n    }\n\n    send({\n      path: 'dht/query',\n      args: peerId,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAAD,CAA5C;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,OAAOP,SAAS,CAAC,CAACQ,MAAD,EAASC,IAAT,EAAeC,QAAf,KAA4B;IAC3C,IAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;MAC3CA,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD,CAJ0C,CAM3C;IACA;;;IACA,IAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;MAChEA,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IAED,MAAME,YAAY,GAAG,CAACC,GAAD,EAAMF,QAAN,KAAmB;MACtC,MAAMG,OAAO,GAAGD,GAAG,CAACE,GAAJ,CAASC,CAAD,IAAQ,IAAIX,QAAJ,CAAaD,MAAM,CAACa,mBAAP,CAA2BD,CAAC,CAACE,EAA7B,CAAb,CAAhB,CAAhB;MAEAP,QAAQ,CAAC,IAAD,EAAOG,OAAP,CAAR;IACD,CAJD;;IAMAN,IAAI,CAAC;MACHW,IAAI,EAAE,WADH;MAEHC,IAAI,EAAEX,MAFH;MAGHY,EAAE,EAAEX;IAHD,CAAD,EAID,CAACY,GAAD,EAAMC,MAAN,KAAiB;MAClB,IAAID,GAAJ,EAAS;QACP,OAAOX,QAAQ,CAACW,GAAD,CAAf;MACD;;MAEDnB,4BAA4B,CAACoB,MAAD,EAASX,YAAT,EAAuBD,QAAvB,CAA5B;IACD,CAVG,CAAJ;EAWD,CA9Be,CAAhB;AA+BD,CAhCD"},"metadata":{},"sourceType":"script"}