{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst sha3 = require('js-sha3');\n\nconst mur = require('murmurhash3js-revisited');\n\nconst sha = require('./sha');\n\nconst {\n  fromNumberTo32BitBuf\n} = require('./utils'); // Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n\n\nconst hash = algorithm => async data => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return Buffer.from(sha3.sha3_224.arrayBuffer(data));\n\n    case 'sha3-256':\n      return Buffer.from(sha3.sha3_256.arrayBuffer(data));\n\n    case 'sha3-384':\n      return Buffer.from(sha3.sha3_384.arrayBuffer(data));\n\n    case 'sha3-512':\n      return Buffer.from(sha3.sha3_512.arrayBuffer(data));\n\n    case 'shake-128':\n      return Buffer.from(sha3.shake128.create(128).update(data).arrayBuffer());\n\n    case 'shake-256':\n      return Buffer.from(sha3.shake256.create(256).update(data).arrayBuffer());\n\n    case 'keccak-224':\n      return Buffer.from(sha3.keccak224.arrayBuffer(data));\n\n    case 'keccak-256':\n      return Buffer.from(sha3.keccak256.arrayBuffer(data));\n\n    case 'keccak-384':\n      return Buffer.from(sha3.keccak384.arrayBuffer(data));\n\n    case 'keccak-512':\n      return Buffer.from(sha3.keccak512.arrayBuffer(data));\n\n    case 'murmur3-128':\n      return Buffer.from(mur.x64.hash128(data), 'hex');\n\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data));\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`);\n  }\n};\n\nmodule.exports = {\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n};","map":{"version":3,"names":["Buffer","require","sha3","mur","sha","fromNumberTo32BitBuf","hash","algorithm","data","from","sha3_224","arrayBuffer","sha3_256","sha3_384","sha3_512","shake128","create","update","shake256","keccak224","keccak256","keccak384","keccak512","x64","hash128","x86","hash32","TypeError","module","exports","sha1","sha2256","sha2512","dblSha2256","sha3224","sha3256","sha3384","sha3512","murmur3128","murmur332","addBlake"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/crypto.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst sha3 = require('js-sha3')\nconst mur = require('murmurhash3js-revisited')\nconst sha = require('./sha')\nconst { fromNumberTo32BitBuf } = require('./utils')\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\nconst hash = (algorithm) => async (data) => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return Buffer.from(sha3.sha3_224.arrayBuffer(data))\n    case 'sha3-256':\n      return Buffer.from(sha3.sha3_256.arrayBuffer(data))\n    case 'sha3-384':\n      return Buffer.from(sha3.sha3_384.arrayBuffer(data))\n    case 'sha3-512':\n      return Buffer.from(sha3.sha3_512.arrayBuffer(data))\n    case 'shake-128':\n      return Buffer.from(sha3.shake128.create(128).update(data).arrayBuffer())\n    case 'shake-256':\n      return Buffer.from(sha3.shake256.create(256).update(data).arrayBuffer())\n    case 'keccak-224':\n      return Buffer.from(sha3.keccak224.arrayBuffer(data))\n    case 'keccak-256':\n      return Buffer.from(sha3.keccak256.arrayBuffer(data))\n    case 'keccak-384':\n      return Buffer.from(sha3.keccak384.arrayBuffer(data))\n    case 'keccak-512':\n      return Buffer.from(sha3.keccak512.arrayBuffer(data))\n    case 'murmur3-128':\n      return Buffer.from(mur.x64.hash128(data), 'hex')\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data))\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`)\n  }\n}\n\nmodule.exports = {\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}