{"ast":null,"code":"'use strict';\n\nconst base58 = require('bs58');\n\nconst multihash = require('multihashes');\n\nconst multibase = require('multibase');\n\nconst Multiaddr = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst CID = require('cids');\n\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/;\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 4;\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/;\nconst fqdnHashMatch = 1;\nconst fqdnProtocolMatch = 2;\n\nfunction isMultihash(hash) {\n  const formatted = convertToString(hash);\n\n  try {\n    const buffer = Buffer.from(base58.decode(formatted));\n    multihash.decode(buffer);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultibase(hash) {\n  try {\n    return multibase.isEncoded(hash);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isCID(hash) {\n  try {\n    new CID(hash); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultiaddr(input) {\n  if (!input) return false;\n  if (Multiaddr.isMultiaddr(input)) return true;\n\n  try {\n    new Multiaddr(input); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isPeerMultiaddr(input) {\n  return isMultiaddr(input) && mafmt.IPFS.matches(input);\n}\n\nfunction isIpfs(input, pattern) {\n  let protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  let hashMatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHashMath;\n  const formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  const match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n\n  let hash = match[hashMatch];\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase();\n  }\n\n  return isCID(hash);\n}\n\nfunction isIpns(input, pattern) {\n  let protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  let hashMatch = arguments.length > 3 ? arguments[3] : undefined;\n  const formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  const match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch]; // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n\n    hash = hash.toLowerCase();\n    return isCID(hash);\n  }\n\n  return true;\n}\n\nfunction isString(input) {\n  return typeof input === 'string';\n}\n\nfunction convertToString(input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input);\n  }\n\n  if (isString(input)) {\n    return input;\n  }\n\n  return false;\n}\n\nconst ipfsSubdomain = url => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\n\nconst ipnsSubdomain = url => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  base32cid: cid => isMultibase(cid) === 'base32' && isCID(cid),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: url => ipfsSubdomain(url) || ipnsSubdomain(url),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: url => isIpfs(url, urlPattern),\n  ipnsUrl: url => isIpns(url, urlPattern),\n  url: url => isIpfs(url, urlPattern) || isIpns(url, urlPattern),\n  urlPattern: urlPattern,\n  ipfsPath: path => isIpfs(path, pathPattern),\n  ipnsPath: path => isIpns(path, pathPattern),\n  path: path => isIpfs(path, pathPattern) || isIpns(path, pathPattern),\n  pathPattern: pathPattern,\n  urlOrPath: x => isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern),\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n};","map":{"version":3,"names":["base58","require","multihash","multibase","Multiaddr","mafmt","CID","urlPattern","pathPattern","defaultProtocolMatch","defaultHashMath","fqdnPattern","fqdnHashMatch","fqdnProtocolMatch","isMultihash","hash","formatted","convertToString","buffer","Buffer","from","decode","e","isMultibase","isEncoded","isCID","isMultiaddr","input","isPeerMultiaddr","IPFS","matches","isIpfs","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","isString","isBuffer","encode","ipfsSubdomain","url","ipnsSubdomain","module","exports","multiaddr","peerMultiaddr","cid","base32cid","subdomain","subdomainPattern","ipfsUrl","ipnsUrl","ipfsPath","path","ipnsPath","urlOrPath","x","cidPath"],"sources":["C:/Users/Shreyas/Desktop/DREAMS/DMR-master/DREAMS-system/client/node_modules/is-ipfs/src/index.js"],"sourcesContent":["'use strict'\n\nconst base58 = require('bs58')\nconst multihash = require('multihashes')\nconst multibase = require('multibase')\nconst Multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst CID = require('cids')\n\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 4\n\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/\nconst fqdnHashMatch = 1\nconst fqdnProtocolMatch = 2\n\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    const buffer = Buffer.from(base58.decode(formatted))\n    multihash.decode(buffer)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isMultibase (hash) {\n  try {\n    return multibase.isEncoded(hash)\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isCID (hash) {\n  try {\n    new CID(hash) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isMultiaddr (input) {\n  if (!input) return false\n  if (Multiaddr.isMultiaddr(input)) return true\n  try {\n    new Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isPeerMultiaddr (input) {\n  return isMultiaddr(input) && mafmt.IPFS.matches(input)\n}\n\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch]\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n    return isCID(hash)\n  }\n\n  return true\n}\n\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\nfunction convertToString (input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input)\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\nconst ipfsSubdomain = (url) => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\nconst ipnsSubdomain = (url) => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  base32cid: (cid) => (isMultibase(cid) === 'base32' && isCID(cid)),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: (url) => (ipfsSubdomain(url) || ipnsSubdomain(url)),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: (url) => isIpfs(url, urlPattern),\n  ipnsUrl: (url) => isIpns(url, urlPattern),\n  url: (url) => (isIpfs(url, urlPattern) || isIpns(url, urlPattern)),\n  urlPattern: urlPattern,\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path: (path) => (isIpfs(path, pathPattern) || isIpns(path, pathPattern)),\n  pathPattern: pathPattern,\n  urlOrPath: (x) => (isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern)),\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}