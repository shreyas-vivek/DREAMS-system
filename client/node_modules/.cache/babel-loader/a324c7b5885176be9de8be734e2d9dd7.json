{"ast":null,"code":"'use strict';\n\nconst codec = require('./codec');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst protocols = require('./protocols-table');\n\nconst varint = require('varint');\n\nconst multibase = require('multibase');\n\nconst CID = require('cids');\n\nconst withIs = require('class-is');\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Buffer, String or another Multiaddr instance\n * public key.\n * @class Multiaddr\n * @param {(String|Buffer|Multiaddr)} addr - If String or Buffer, needs to adhere\n * to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n */\n\nconst Multiaddr = withIs.proto(function (addr) {\n  if (!(this instanceof Multiaddr)) {\n    return new Multiaddr(addr);\n  } // default\n\n\n  if (addr == null) {\n    addr = '';\n  }\n\n  if (addr instanceof Buffer) {\n    /**\n     * @type {Buffer} - The raw bytes representing this multiaddress\n     */\n    this.buffer = codec.fromBuffer(addr);\n  } else if (typeof addr === 'string' || addr instanceof String) {\n    if (addr.length > 0 && addr.charAt(0) !== '/') {\n      throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n    }\n\n    this.buffer = codec.fromString(addr);\n  } else if (addr.buffer && addr.protos && addr.protoCodes) {\n    // Multiaddr\n    this.buffer = codec.fromBuffer(addr.buffer); // validate + copy buffer\n  } else {\n    throw new Error('addr must be a string, Buffer, or another Multiaddr');\n  }\n}, {\n  className: 'Multiaddr',\n  symbolName: '@multiformats/js-multiaddr/multiaddr'\n});\n/**\n * Returns Multiaddr as a String\n *\n * @returns {String}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n * // '/ip4/127.0.0.1/tcp/4001'\n */\n\nMultiaddr.prototype.toString = function toString() {\n  return codec.bufferToString(this.buffer);\n};\n/**\n * Returns Multiaddr as a JSON encoded object\n *\n * @returns {String}\n * @example\n * JSON.stringify(Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n * // '/ip4/127.0.0.1/tcp/4001'\n */\n\n\nMultiaddr.prototype.toJSON = Multiaddr.prototype.toString;\n/**\n * Returns Multiaddr as a convinient options object to be used with net.createConnection\n *\n * @returns {{family: String, host: String, transport: String, port: Number}}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n * // { family: 'ipv4', host: '127.0.0.1', transport: 'tcp', port: 4001 }\n */\n\nMultiaddr.prototype.toOptions = function toOptions() {\n  const opts = {};\n  const parsed = this.toString().split('/');\n  opts.family = parsed[1] === 'ip4' ? 'ipv4' : 'ipv6';\n  opts.host = parsed[2];\n  opts.transport = parsed[3];\n  opts.port = parseInt(parsed[4]);\n  return opts;\n};\n/**\n * Returns Multiaddr as a human-readable string.\n * For post Node.js v10.0.0.\n * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n *\n * @returns {String}\n * @example\n * console.log(Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n */\n\n\nMultiaddr.prototype[inspect] = function inspectCustom() {\n  return '<Multiaddr ' + this.buffer.toString('hex') + ' - ' + codec.bufferToString(this.buffer) + '>';\n};\n/**\n * Returns Multiaddr as a human-readable string.\n * Fallback for pre Node.js v10.0.0.\n * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n *\n * @returns {String}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n */\n\n\nMultiaddr.prototype.inspect = function inspect() {\n  return '<Multiaddr ' + this.buffer.toString('hex') + ' - ' + codec.bufferToString(this.buffer) + '>';\n};\n/**\n * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n * left-to-right order. Each object contains the protocol code, protocol name,\n * and the size of its address space in bits.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @returns {Array.<Object>} protocols - All the protocols the address is composed of\n * @returns {Number} protocols[].code\n * @returns {Number} protocols[].size\n * @returns {String} protocols[].name\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n * // [ { code: 4, size: 32, name: 'ip4' },\n * //   { code: 6, size: 16, name: 'tcp' } ]\n */\n\n\nMultiaddr.prototype.protos = function protos() {\n  return this.protoCodes().map(code => Object.assign({}, protocols(code)));\n};\n/**\n * Returns the codes of the protocols in left-to-right order.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @returns {Array.<Number>} protocol codes\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n * // [ 4, 6 ]\n */\n\n\nMultiaddr.prototype.protoCodes = function protoCodes() {\n  const codes = [];\n  const buf = this.buffer;\n  let i = 0;\n\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = protocols(code);\n    const size = codec.sizeForAddr(p, buf.slice(i + n));\n    i += size + n;\n    codes.push(code);\n  }\n\n  return codes;\n};\n/**\n * Returns the names of the protocols in left-to-right order.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @return {Array.<String>} protocol names\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n * // [ 'ip4', 'tcp' ]\n */\n\n\nMultiaddr.prototype.protoNames = function protoNames() {\n  return this.protos().map(proto => proto.name);\n};\n/**\n * Returns a tuple of parts\n *\n * @return {Array.<Array>} tuples\n * @return {Number} tuples[].0 code of protocol\n * @return {Buffer} tuples[].1 contents of address\n * @example\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n */\n\n\nMultiaddr.prototype.tuples = function tuples() {\n  return codec.bufferToTuples(this.buffer);\n};\n/**\n * Returns a tuple of string/number parts\n *\n * @return {Array.<Array>} tuples\n * @return {Number} tuples[].0 code of protocol\n * @return {(String|Number)} tuples[].1 contents of address\n * @example\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n * // [ [ 4, '127.0.0.1' ], [ 6, 4001 ] ]\n */\n\n\nMultiaddr.prototype.stringTuples = function stringTuples() {\n  const t = codec.bufferToTuples(this.buffer);\n  return codec.tuplesToStringTuples(t);\n};\n/**\n * Encapsulates a Multiaddr in another Multiaddr\n *\n * @param {Multiaddr} addr - Multiaddr to add into this Multiaddr\n * @return {Multiaddr}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n *\n * mh3.toString()\n * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n */\n\n\nMultiaddr.prototype.encapsulate = function encapsulate(addr) {\n  addr = Multiaddr(addr);\n  return Multiaddr(this.toString() + addr.toString());\n};\n/**\n * Decapsulates a Multiaddr from another Multiaddr\n *\n * @param {Multiaddr} addr - Multiaddr to remove from this Multiaddr\n * @return {Multiaddr}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n *\n * mh3.decapsulate(mh2).toString()\n * // '/ip4/8.8.8.8/tcp/1080'\n */\n\n\nMultiaddr.prototype.decapsulate = function decapsulate(addr) {\n  addr = addr.toString();\n  const s = this.toString();\n  const i = s.lastIndexOf(addr);\n\n  if (i < 0) {\n    throw new Error('Address ' + this + ' does not contain subaddress: ' + addr);\n  }\n\n  return Multiaddr(s.slice(0, i));\n};\n/**\n * A more reliable version of `decapsulate` if you are targeting a\n * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n * will be removed from the `Multiaddr`, and a new instance will be returned.\n * If the code is not present, the original `Multiaddr` is returned.\n *\n * @param {Number} code The code of the protocol to decapsulate from this Multiaddr\n * @return {Multiaddr}\n * @example\n * const addr = Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n *\n * addr.decapsulateCode(421).toString()\n * // '/ip4/0.0.0.0/tcp/8080'\n *\n * Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n * // '/ip4/127.0.0.1/tcp/8080'\n */\n\n\nMultiaddr.prototype.decapsulateCode = function decapsulateCode(code) {\n  const tuples = this.tuples();\n\n  for (let i = tuples.length - 1; i >= 0; i--) {\n    if (tuples[i][0] === code) {\n      return Multiaddr(codec.tuplesToBuffer(tuples.slice(0, i)));\n    }\n  }\n\n  return this;\n};\n/**\n * Extract the peerId if the multiaddr contains one\n *\n * @return {String|null} peerId - The id of the peer or null if invalid or missing from the ma\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n *\n * // should return QmValidBase58string or null if the id is missing or invalid\n * const peerId = mh1.getPeerId()\n */\n\n\nMultiaddr.prototype.getPeerId = function getPeerId() {\n  let b58str = null;\n\n  try {\n    const tuples = this.stringTuples().filter(tuple => {\n      if (tuple[0] === protocols.names.ipfs.code) {\n        return true;\n      }\n    }); // Get the last id\n\n    b58str = tuples.pop()[1]; // Get multihash, unwrap from CID if needed\n\n    b58str = multibase.encode('base58btc', new CID(b58str).multihash).toString().slice(1);\n  } catch (e) {\n    b58str = null;\n  }\n\n  return b58str;\n};\n/**\n * Extract the path if the multiaddr contains one\n *\n * @return {String|null} path - The path of the multiaddr, or null if no path protocol is present\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n *\n * // should return utf8 string or null if the id is missing or invalid\n * const path = mh1.getPath()\n */\n\n\nMultiaddr.prototype.getPath = function getPath() {\n  let path = null;\n\n  try {\n    path = this.stringTuples().filter(tuple => {\n      const proto = protocols(tuple[0]);\n\n      if (proto.path) {\n        return true;\n      }\n    })[0][1];\n  } catch (e) {\n    path = null;\n  }\n\n  return path;\n};\n/**\n * Checks if two Multiaddrs are the same\n *\n * @param {Multiaddr} addr\n * @return {Bool}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * mh1.equals(mh1)\n * // true\n *\n * mh1.equals(mh2)\n * // false\n */\n\n\nMultiaddr.prototype.equals = function equals(addr) {\n  return this.buffer.equals(addr.buffer);\n};\n/**\n * Gets a Multiaddrs node-friendly address object. Note that protocol information\n * is left out: in Node (and most network systems) the protocol is unknowable\n * given only the address.\n *\n * Has to be a ThinWaist Address, otherwise throws error\n *\n * @returns {{family: String, address: String, port: Number}}\n * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n * // {family: 'IPv4', address: '127.0.0.1', port: '4001'}\n */\n\n\nMultiaddr.prototype.nodeAddress = function nodeAddress() {\n  const codes = this.protoCodes();\n  const names = this.protoNames();\n  const parts = this.toString().split('/').slice(1);\n\n  if (parts.length < 4) {\n    throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".');\n  } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n    throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`);\n  } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n    throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`);\n  }\n\n  return {\n    family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n    address: parts[1],\n    // ip addr\n    port: parseInt(parts[3]) // tcp or udp port\n\n  };\n};\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @param {{family: String, address: String, port: Number}} addr\n * @param {String} transport\n * @returns {Multiaddr} multiaddr\n * @throws {Error} Throws error if addr is not truthy\n * @throws {Error} Throws error if transport is not truthy\n * @example\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n */\n\n\nMultiaddr.fromNodeAddress = function fromNodeAddress(addr, transport) {\n  if (!addr) throw new Error('requires node address object');\n  if (!transport) throw new Error('requires transport protocol');\n  let ip;\n\n  switch (addr.family) {\n    case 'IPv4':\n      ip = 'ip4';\n      break;\n\n    case 'IPv6':\n      ip = 'ip6';\n      break;\n\n    default:\n      throw Error(`Invalid addr family. Got '${addr.family}' instead of 'IPv4' or 'IPv6'`);\n  }\n\n  return Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n}; // TODO find a better example, not sure about it's good enough\n\n/**\n * Returns if a Multiaddr is a Thin Waist address or not.\n *\n * Thin Waist is if a Multiaddr adheres to the standard combination of:\n *\n * `{IPv4, IPv6}/{TCP, UDP}`\n *\n * @param {Multiaddr} [addr] - Defaults to using `this` instance\n * @returns {Boolean} isThinWaistAddress\n * @example\n * const mh1 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * const mh2 = Multiaddr('/ip4/192.168.2.1/tcp/5001')\n * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n * mh1.isThinWaistAddress()\n * // true\n * mh2.isThinWaistAddress()\n * // true\n * mh3.isThinWaistAddress()\n * // false\n */\n\n\nMultiaddr.prototype.isThinWaistAddress = function isThinWaistAddress(addr) {\n  const protos = (addr || this).protos();\n\n  if (protos.length !== 2) {\n    return false;\n  }\n\n  if (protos[0].code !== 4 && protos[0].code !== 41) {\n    return false;\n  }\n\n  if (protos[1].code !== 6 && protos[1].code !== 273) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @instance\n * @returns {{table: Array, names: Object, codes: Object}}\n *\n */\n\n\nMultiaddr.protocols = protocols;\n/**\n * Returns if something is a Multiaddr that is a name\n *\n * @param {Multiaddr} addr\n * @return {Bool} isName\n */\n\nMultiaddr.isName = function isName(addr) {\n  if (!Multiaddr.isMultiaddr(addr)) {\n    return false;\n  } // if a part of the multiaddr is resolvable, then return true\n\n\n  return addr.protos().some(proto => proto.resolvable);\n};\n/**\n * Returns an array of multiaddrs, by resolving the multiaddr that is a name\n *\n * @async\n * @param {Multiaddr} addr\n * @return {Multiaddr[]}\n */\n\n\nMultiaddr.resolve = function resolve(addr) {\n  if (!Multiaddr.isMultiaddr(addr) || !Multiaddr.isName(addr)) {\n    return Promise.reject(Error('not a valid name'));\n  }\n  /*\n   * Needs more consideration from spec design:\n   *   - what to return\n   *   - how to achieve it in the browser?\n   */\n\n\n  return Promise.reject(new Error('not implemented yet'));\n};\n\nexports = module.exports = Multiaddr;","map":{"version":3,"names":["codec","require","Buffer","protocols","varint","multibase","CID","withIs","inspect","Symbol","for","Multiaddr","proto","addr","buffer","fromBuffer","String","length","charAt","Error","fromString","protos","protoCodes","className","symbolName","prototype","toString","bufferToString","toJSON","toOptions","opts","parsed","split","family","host","transport","port","parseInt","inspectCustom","map","code","Object","assign","codes","buf","i","decode","n","bytes","p","size","sizeForAddr","slice","push","protoNames","name","tuples","bufferToTuples","stringTuples","t","tuplesToStringTuples","encapsulate","decapsulate","s","lastIndexOf","decapsulateCode","tuplesToBuffer","getPeerId","b58str","filter","tuple","names","ipfs","pop","encode","multihash","e","getPath","path","equals","nodeAddress","parts","address","fromNodeAddress","ip","join","isThinWaistAddress","isName","isMultiaddr","some","resolvable","resolve","Promise","reject","exports","module"],"sources":["C:/Users/Shreyas/Desktop/DREAMS/DMR-master/DREAMS-system/client/node_modules/mafmt/node_modules/multiaddr/src/index.js"],"sourcesContent":["'use strict'\n\nconst codec = require('./codec')\nconst { Buffer } = require('buffer')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst multibase = require('multibase')\nconst CID = require('cids')\nconst withIs = require('class-is')\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Buffer, String or another Multiaddr instance\n * public key.\n * @class Multiaddr\n * @param {(String|Buffer|Multiaddr)} addr - If String or Buffer, needs to adhere\n * to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n */\nconst Multiaddr = withIs.proto(function (addr) {\n  if (!(this instanceof Multiaddr)) {\n    return new Multiaddr(addr)\n  }\n\n  // default\n  if (addr == null) {\n    addr = ''\n  }\n\n  if (addr instanceof Buffer) {\n    /**\n     * @type {Buffer} - The raw bytes representing this multiaddress\n     */\n    this.buffer = codec.fromBuffer(addr)\n  } else if (typeof addr === 'string' || addr instanceof String) {\n    if (addr.length > 0 && addr.charAt(0) !== '/') {\n      throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n    }\n    this.buffer = codec.fromString(addr)\n  } else if (addr.buffer && addr.protos && addr.protoCodes) { // Multiaddr\n    this.buffer = codec.fromBuffer(addr.buffer) // validate + copy buffer\n  } else {\n    throw new Error('addr must be a string, Buffer, or another Multiaddr')\n  }\n}, { className: 'Multiaddr', symbolName: '@multiformats/js-multiaddr/multiaddr' })\n\n/**\n * Returns Multiaddr as a String\n *\n * @returns {String}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n * // '/ip4/127.0.0.1/tcp/4001'\n */\nMultiaddr.prototype.toString = function toString () {\n  return codec.bufferToString(this.buffer)\n}\n\n/**\n * Returns Multiaddr as a JSON encoded object\n *\n * @returns {String}\n * @example\n * JSON.stringify(Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n * // '/ip4/127.0.0.1/tcp/4001'\n */\nMultiaddr.prototype.toJSON = Multiaddr.prototype.toString\n\n/**\n * Returns Multiaddr as a convinient options object to be used with net.createConnection\n *\n * @returns {{family: String, host: String, transport: String, port: Number}}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n * // { family: 'ipv4', host: '127.0.0.1', transport: 'tcp', port: 4001 }\n */\nMultiaddr.prototype.toOptions = function toOptions () {\n  const opts = {}\n  const parsed = this.toString().split('/')\n  opts.family = parsed[1] === 'ip4' ? 'ipv4' : 'ipv6'\n  opts.host = parsed[2]\n  opts.transport = parsed[3]\n  opts.port = parseInt(parsed[4])\n  return opts\n}\n\n/**\n * Returns Multiaddr as a human-readable string.\n * For post Node.js v10.0.0.\n * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n *\n * @returns {String}\n * @example\n * console.log(Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n */\nMultiaddr.prototype[inspect] = function inspectCustom () {\n  return '<Multiaddr ' +\n    this.buffer.toString('hex') + ' - ' +\n    codec.bufferToString(this.buffer) + '>'\n}\n\n/**\n * Returns Multiaddr as a human-readable string.\n * Fallback for pre Node.js v10.0.0.\n * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n *\n * @returns {String}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n */\nMultiaddr.prototype.inspect = function inspect () {\n  return '<Multiaddr ' +\n    this.buffer.toString('hex') + ' - ' +\n    codec.bufferToString(this.buffer) + '>'\n}\n\n/**\n * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n * left-to-right order. Each object contains the protocol code, protocol name,\n * and the size of its address space in bits.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @returns {Array.<Object>} protocols - All the protocols the address is composed of\n * @returns {Number} protocols[].code\n * @returns {Number} protocols[].size\n * @returns {String} protocols[].name\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n * // [ { code: 4, size: 32, name: 'ip4' },\n * //   { code: 6, size: 16, name: 'tcp' } ]\n */\nMultiaddr.prototype.protos = function protos () {\n  return this.protoCodes().map(code => Object.assign({}, protocols(code)))\n}\n\n/**\n * Returns the codes of the protocols in left-to-right order.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @returns {Array.<Number>} protocol codes\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n * // [ 4, 6 ]\n */\nMultiaddr.prototype.protoCodes = function protoCodes () {\n  const codes = []\n  const buf = this.buffer\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n    const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n    i += (size + n)\n    codes.push(code)\n  }\n\n  return codes\n}\n\n/**\n * Returns the names of the protocols in left-to-right order.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @return {Array.<String>} protocol names\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n * // [ 'ip4', 'tcp' ]\n */\nMultiaddr.prototype.protoNames = function protoNames () {\n  return this.protos().map(proto => proto.name)\n}\n\n/**\n * Returns a tuple of parts\n *\n * @return {Array.<Array>} tuples\n * @return {Number} tuples[].0 code of protocol\n * @return {Buffer} tuples[].1 contents of address\n * @example\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n */\nMultiaddr.prototype.tuples = function tuples () {\n  return codec.bufferToTuples(this.buffer)\n}\n\n/**\n * Returns a tuple of string/number parts\n *\n * @return {Array.<Array>} tuples\n * @return {Number} tuples[].0 code of protocol\n * @return {(String|Number)} tuples[].1 contents of address\n * @example\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n * // [ [ 4, '127.0.0.1' ], [ 6, 4001 ] ]\n */\nMultiaddr.prototype.stringTuples = function stringTuples () {\n  const t = codec.bufferToTuples(this.buffer)\n  return codec.tuplesToStringTuples(t)\n}\n\n/**\n * Encapsulates a Multiaddr in another Multiaddr\n *\n * @param {Multiaddr} addr - Multiaddr to add into this Multiaddr\n * @return {Multiaddr}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n *\n * mh3.toString()\n * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n */\nMultiaddr.prototype.encapsulate = function encapsulate (addr) {\n  addr = Multiaddr(addr)\n  return Multiaddr(this.toString() + addr.toString())\n}\n\n/**\n * Decapsulates a Multiaddr from another Multiaddr\n *\n * @param {Multiaddr} addr - Multiaddr to remove from this Multiaddr\n * @return {Multiaddr}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n *\n * mh3.decapsulate(mh2).toString()\n * // '/ip4/8.8.8.8/tcp/1080'\n */\nMultiaddr.prototype.decapsulate = function decapsulate (addr) {\n  addr = addr.toString()\n  const s = this.toString()\n  const i = s.lastIndexOf(addr)\n  if (i < 0) {\n    throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)\n  }\n  return Multiaddr(s.slice(0, i))\n}\n\n/**\n * A more reliable version of `decapsulate` if you are targeting a\n * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n * will be removed from the `Multiaddr`, and a new instance will be returned.\n * If the code is not present, the original `Multiaddr` is returned.\n *\n * @param {Number} code The code of the protocol to decapsulate from this Multiaddr\n * @return {Multiaddr}\n * @example\n * const addr = Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n *\n * addr.decapsulateCode(421).toString()\n * // '/ip4/0.0.0.0/tcp/8080'\n *\n * Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n * // '/ip4/127.0.0.1/tcp/8080'\n */\nMultiaddr.prototype.decapsulateCode = function decapsulateCode (code) {\n  const tuples = this.tuples()\n  for (let i = tuples.length - 1; i >= 0; i--) {\n    if (tuples[i][0] === code) {\n      return Multiaddr(codec.tuplesToBuffer(tuples.slice(0, i)))\n    }\n  }\n  return this\n}\n\n/**\n * Extract the peerId if the multiaddr contains one\n *\n * @return {String|null} peerId - The id of the peer or null if invalid or missing from the ma\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n *\n * // should return QmValidBase58string or null if the id is missing or invalid\n * const peerId = mh1.getPeerId()\n */\nMultiaddr.prototype.getPeerId = function getPeerId () {\n  let b58str = null\n  try {\n    const tuples = this.stringTuples().filter((tuple) => {\n      if (tuple[0] === protocols.names.ipfs.code) {\n        return true\n      }\n    })\n\n    // Get the last id\n    b58str = tuples.pop()[1]\n    // Get multihash, unwrap from CID if needed\n    b58str = multibase.encode('base58btc', new CID(b58str).multihash).toString().slice(1)\n  } catch (e) {\n    b58str = null\n  }\n\n  return b58str\n}\n\n/**\n * Extract the path if the multiaddr contains one\n *\n * @return {String|null} path - The path of the multiaddr, or null if no path protocol is present\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n *\n * // should return utf8 string or null if the id is missing or invalid\n * const path = mh1.getPath()\n */\nMultiaddr.prototype.getPath = function getPath () {\n  let path = null\n  try {\n    path = this.stringTuples().filter((tuple) => {\n      const proto = protocols(tuple[0])\n      if (proto.path) {\n        return true\n      }\n    })[0][1]\n  } catch (e) {\n    path = null\n  }\n\n  return path\n}\n\n/**\n * Checks if two Multiaddrs are the same\n *\n * @param {Multiaddr} addr\n * @return {Bool}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * mh1.equals(mh1)\n * // true\n *\n * mh1.equals(mh2)\n * // false\n */\nMultiaddr.prototype.equals = function equals (addr) {\n  return this.buffer.equals(addr.buffer)\n}\n\n/**\n * Gets a Multiaddrs node-friendly address object. Note that protocol information\n * is left out: in Node (and most network systems) the protocol is unknowable\n * given only the address.\n *\n * Has to be a ThinWaist Address, otherwise throws error\n *\n * @returns {{family: String, address: String, port: Number}}\n * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n * // {family: 'IPv4', address: '127.0.0.1', port: '4001'}\n */\nMultiaddr.prototype.nodeAddress = function nodeAddress () {\n  const codes = this.protoCodes()\n  const names = this.protoNames()\n  const parts = this.toString().split('/').slice(1)\n\n  if (parts.length < 4) {\n    throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".')\n  } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n    throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`)\n  } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n    throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`)\n  }\n\n  return {\n    family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n    address: parts[1], // ip addr\n    port: parseInt(parts[3]) // tcp or udp port\n  }\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @param {{family: String, address: String, port: Number}} addr\n * @param {String} transport\n * @returns {Multiaddr} multiaddr\n * @throws {Error} Throws error if addr is not truthy\n * @throws {Error} Throws error if transport is not truthy\n * @example\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n */\nMultiaddr.fromNodeAddress = function fromNodeAddress (addr, transport) {\n  if (!addr) throw new Error('requires node address object')\n  if (!transport) throw new Error('requires transport protocol')\n  let ip\n  switch (addr.family) {\n    case 'IPv4':\n      ip = 'ip4'\n      break\n    case 'IPv6':\n      ip = 'ip6'\n      break\n    default:\n      throw Error(`Invalid addr family. Got '${addr.family}' instead of 'IPv4' or 'IPv6'`)\n  }\n  return Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n}\n\n// TODO find a better example, not sure about it's good enough\n/**\n * Returns if a Multiaddr is a Thin Waist address or not.\n *\n * Thin Waist is if a Multiaddr adheres to the standard combination of:\n *\n * `{IPv4, IPv6}/{TCP, UDP}`\n *\n * @param {Multiaddr} [addr] - Defaults to using `this` instance\n * @returns {Boolean} isThinWaistAddress\n * @example\n * const mh1 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * const mh2 = Multiaddr('/ip4/192.168.2.1/tcp/5001')\n * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n * mh1.isThinWaistAddress()\n * // true\n * mh2.isThinWaistAddress()\n * // true\n * mh3.isThinWaistAddress()\n * // false\n */\nMultiaddr.prototype.isThinWaistAddress = function isThinWaistAddress (addr) {\n  const protos = (addr || this).protos()\n\n  if (protos.length !== 2) {\n    return false\n  }\n\n  if (protos[0].code !== 4 && protos[0].code !== 41) {\n    return false\n  }\n  if (protos[1].code !== 6 && protos[1].code !== 273) {\n    return false\n  }\n  return true\n}\n\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @instance\n * @returns {{table: Array, names: Object, codes: Object}}\n *\n */\nMultiaddr.protocols = protocols\n\n/**\n * Returns if something is a Multiaddr that is a name\n *\n * @param {Multiaddr} addr\n * @return {Bool} isName\n */\nMultiaddr.isName = function isName (addr) {\n  if (!Multiaddr.isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Returns an array of multiaddrs, by resolving the multiaddr that is a name\n *\n * @async\n * @param {Multiaddr} addr\n * @return {Multiaddr[]}\n */\nMultiaddr.resolve = function resolve (addr) {\n  if (!Multiaddr.isMultiaddr(addr) || !Multiaddr.isName(addr)) {\n    return Promise.reject(Error('not a valid name'))\n  }\n\n  /*\n   * Needs more consideration from spec design:\n   *   - what to return\n   *   - how to achieve it in the browser?\n   */\n  return Promise.reject(new Error('not implemented yet'))\n}\n\nexports = module.exports = Multiaddr\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}