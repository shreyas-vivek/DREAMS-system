{"ast":null,"code":"/*\n * [hi-base32]{@link https://github.com/emn178/hi-base32}\n *\n * @version 0.5.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\n  if (NODE_JS) {\n    root = global;\n  }\n\n  var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var BASE32_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'.split('');\n  var BASE32_DECODE_CHAR = {\n    'A': 0,\n    'B': 1,\n    'C': 2,\n    'D': 3,\n    'E': 4,\n    'F': 5,\n    'G': 6,\n    'H': 7,\n    'I': 8,\n    'J': 9,\n    'K': 10,\n    'L': 11,\n    'M': 12,\n    'N': 13,\n    'O': 14,\n    'P': 15,\n    'Q': 16,\n    'R': 17,\n    'S': 18,\n    'T': 19,\n    'U': 20,\n    'V': 21,\n    'W': 22,\n    'X': 23,\n    'Y': 24,\n    'Z': 25,\n    '2': 26,\n    '3': 27,\n    '4': 28,\n    '5': 29,\n    '6': 30,\n    '7': 31\n  };\n  var blocks = [0, 0, 0, 0, 0, 0, 0, 0];\n\n  var throwInvalidUtf8 = function (position, partial) {\n    if (partial.length > 10) {\n      partial = '...' + partial.substr(-10);\n    }\n\n    var err = new Error('Decoded data is not valid UTF-8.' + ' Maybe try base32.decode.asBytes()?' + ' Partial data after reading ' + position + ' bytes: ' + partial + ' <-');\n    err.position = position;\n    throw err;\n  };\n\n  var toUtf8String = function (bytes) {\n    var str = '',\n        length = bytes.length,\n        i = 0,\n        followingChars = 0,\n        b,\n        c;\n\n    while (i < length) {\n      b = bytes[i++];\n\n      if (b <= 0x7F) {\n        str += String.fromCharCode(b);\n        continue;\n      } else if (b > 0xBF && b <= 0xDF) {\n        c = b & 0x1F;\n        followingChars = 1;\n      } else if (b <= 0xEF) {\n        c = b & 0x0F;\n        followingChars = 2;\n      } else if (b <= 0xF7) {\n        c = b & 0x07;\n        followingChars = 3;\n      } else {\n        throwInvalidUtf8(i, str);\n      }\n\n      for (var j = 0; j < followingChars; ++j) {\n        b = bytes[i++];\n\n        if (b < 0x80 || b > 0xBF) {\n          throwInvalidUtf8(i, str);\n        }\n\n        c <<= 6;\n        c += b & 0x3F;\n      }\n\n      if (c >= 0xD800 && c <= 0xDFFF) {\n        throwInvalidUtf8(i, str);\n      }\n\n      if (c > 0x10FFFF) {\n        throwInvalidUtf8(i, str);\n      }\n\n      if (c <= 0xFFFF) {\n        str += String.fromCharCode(c);\n      } else {\n        c -= 0x10000;\n        str += String.fromCharCode((c >> 10) + 0xD800);\n        str += String.fromCharCode((c & 0x3FF) + 0xDC00);\n      }\n    }\n\n    return str;\n  };\n\n  var decodeAsBytes = function (base32Str) {\n    if (base32Str === '') {\n      return [];\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n\n    base32Str = base32Str.replace(/=/g, '');\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        v6,\n        v7,\n        v8,\n        bytes = [],\n        index = 0,\n        length = base32Str.length; // 4 char to 3 bytes\n\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n      bytes[index++] = (v7 << 5 | v8) & 255;\n    } // remain bytes\n\n\n    var remain = length - count;\n\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n    }\n\n    return bytes;\n  };\n\n  var encodeAscii = function (str) {\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        base32Str = '',\n        length = str.length;\n\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i++);\n      v5 = str.charCodeAt(i++);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n    } // remain char\n\n\n    var remain = length - count;\n\n    if (remain === 1) {\n      v1 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n    } else if (remain === 2) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n    } else if (remain === 3) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n    } else if (remain === 4) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n    }\n\n    return base32Str;\n  };\n\n  var encodeUtf8 = function (str) {\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        code,\n        end = false,\n        base32Str = '',\n        index = 0,\n        i,\n        start = 0,\n        bytes = 0,\n        length = str.length;\n\n    if (str === '') {\n      return base32Str;\n    }\n\n    do {\n      blocks[0] = blocks[5];\n      blocks[1] = blocks[6];\n      blocks[2] = blocks[7];\n\n      for (i = start; index < length && i < 5; ++index) {\n        code = str.charCodeAt(index);\n\n        if (code < 0x80) {\n          blocks[i++] = code;\n        } else if (code < 0x800) {\n          blocks[i++] = 0xc0 | code >> 6;\n          blocks[i++] = 0x80 | code & 0x3f;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i++] = 0xe0 | code >> 12;\n          blocks[i++] = 0x80 | code >> 6 & 0x3f;\n          blocks[i++] = 0x80 | code & 0x3f;\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++index) & 0x3ff);\n          blocks[i++] = 0xf0 | code >> 18;\n          blocks[i++] = 0x80 | code >> 12 & 0x3f;\n          blocks[i++] = 0x80 | code >> 6 & 0x3f;\n          blocks[i++] = 0x80 | code & 0x3f;\n        }\n      }\n\n      bytes += i - start;\n      start = i - 5;\n\n      if (index === length) {\n        ++index;\n      }\n\n      if (index > length && i < 6) {\n        end = true;\n      }\n\n      v1 = blocks[0];\n\n      if (i > 4) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        v5 = blocks[4];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n      } else if (i === 1) {\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n      } else if (i === 2) {\n        v2 = blocks[1];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n      } else if (i === 3) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n      } else {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n      }\n    } while (!end);\n\n    return base32Str;\n  };\n\n  var encodeBytes = function (bytes) {\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        base32Str = '',\n        length = bytes.length;\n\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i++];\n      v5 = bytes[i++];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n    } // remain char\n\n\n    var remain = length - count;\n\n    if (remain === 1) {\n      v1 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n    } else if (remain === 2) {\n      v1 = bytes[i++];\n      v2 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n    } else if (remain === 3) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n    } else if (remain === 4) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n    }\n\n    return base32Str;\n  };\n\n  var encode = function (input, asciiOnly) {\n    var notString = typeof input !== 'string';\n\n    if (notString && input.constructor === ArrayBuffer) {\n      input = new Uint8Array(input);\n    }\n\n    if (notString) {\n      return encodeBytes(input);\n    } else if (asciiOnly) {\n      return encodeAscii(input);\n    } else {\n      return encodeUtf8(input);\n    }\n  };\n\n  var decode = function (base32Str, asciiOnly) {\n    if (!asciiOnly) {\n      return toUtf8String(decodeAsBytes(base32Str));\n    }\n\n    if (base32Str === '') {\n      return '';\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        v6,\n        v7,\n        v8,\n        str = '',\n        length = base32Str.indexOf('=');\n\n    if (length === -1) {\n      length = base32Str.length;\n    } // 8 char to 5 bytes\n\n\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) + String.fromCharCode((v7 << 5 | v8) & 255);\n    } // remain bytes\n\n\n    var remain = length - count;\n\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);\n    }\n\n    return str;\n  };\n\n  var exports = {\n    encode: encode,\n    decode: decode\n  };\n  decode.asBytes = decodeAsBytes;\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.base32 = exports;\n\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();","map":{"version":3,"names":["root","window","NODE_JS","HI_BASE32_NO_NODE_JS","process","versions","node","global","COMMON_JS","HI_BASE32_NO_COMMON_JS","module","exports","AMD","define","amd","BASE32_ENCODE_CHAR","split","BASE32_DECODE_CHAR","blocks","throwInvalidUtf8","position","partial","length","substr","err","Error","toUtf8String","bytes","str","i","followingChars","b","c","String","fromCharCode","j","decodeAsBytes","base32Str","test","replace","v1","v2","v3","v4","v5","v6","v7","v8","index","count","charAt","remain","encodeAscii","parseInt","charCodeAt","encodeUtf8","code","end","start","encodeBytes","encode","input","asciiOnly","notString","constructor","ArrayBuffer","Uint8Array","decode","indexOf","asBytes","base32"],"sources":["C:/Users/Shreyas/Desktop/DREAMS/DMR-master/DREAMS-system/client/node_modules/hi-base32/src/base32.js"],"sourcesContent":["/*\n * [hi-base32]{@link https://github.com/emn178/hi-base32}\n *\n * @version 0.5.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  }\n  var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var BASE32_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'.split('');\n  var BASE32_DECODE_CHAR = {\n    'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8,\n    'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16,\n    'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24,\n    'Z': 25, '2': 26, '3': 27, '4': 28, '5': 29, '6': 30, '7': 31\n  };\n\n  var blocks = [0, 0, 0, 0, 0, 0, 0, 0];\n\n  var throwInvalidUtf8 = function (position, partial) {\n    if (partial.length > 10) {\n      partial = '...' + partial.substr(-10);\n    }\n    var err = new Error('Decoded data is not valid UTF-8.'\n      + ' Maybe try base32.decode.asBytes()?'\n      + ' Partial data after reading ' + position + ' bytes: ' + partial + ' <-');\n    err.position = position;\n    throw err;\n  };\n\n  var toUtf8String = function (bytes) {\n    var str = '', length = bytes.length, i = 0, followingChars = 0, b, c;\n    while (i < length) {\n      b = bytes[i++];\n      if (b <= 0x7F) {\n        str += String.fromCharCode(b);\n        continue;\n      } else if (b > 0xBF && b <= 0xDF) {\n        c = b & 0x1F;\n        followingChars = 1;\n      } else if (b <= 0xEF) {\n        c = b & 0x0F;\n        followingChars = 2;\n      } else if (b <= 0xF7) {\n        c = b & 0x07;\n        followingChars = 3;\n      } else {\n        throwInvalidUtf8(i, str);\n      }\n\n      for (var j = 0; j < followingChars; ++j) {\n        b = bytes[i++];\n        if (b < 0x80 || b > 0xBF) {\n          throwInvalidUtf8(i, str);\n        }\n        c <<= 6;\n        c += b & 0x3F;\n      }\n      if (c >= 0xD800 && c <= 0xDFFF) {\n        throwInvalidUtf8(i, str);\n      }\n      if (c > 0x10FFFF) {\n        throwInvalidUtf8(i, str);\n      }\n\n      if (c <= 0xFFFF) {\n        str += String.fromCharCode(c);\n      } else {\n        c -= 0x10000;\n        str += String.fromCharCode((c >> 10) + 0xD800);\n        str += String.fromCharCode((c & 0x3FF) + 0xDC00);\n      }\n    }\n    return str;\n  };\n\n  var decodeAsBytes = function (base32Str) {\n    if (base32Str === '') {\n      return [];\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n    base32Str = base32Str.replace(/=/g, '');\n    var v1, v2, v3, v4, v5, v6, v7, v8, bytes = [], index = 0, length = base32Str.length;\n\n    // 4 char to 3 bytes\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n      bytes[index++] = (v7 << 5 | v8) & 255;\n    }\n\n    // remain bytes\n    var remain = length - count;\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n    }\n    return bytes;\n  };\n\n  var encodeAscii = function (str) {\n    var v1, v2, v3, v4, v5, base32Str = '', length = str.length;\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i++);\n      v5 = str.charCodeAt(i++);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n        BASE32_ENCODE_CHAR[v5 & 31];\n    }\n\n    // remain char\n    var remain = length - count;\n    if (remain === 1) {\n      v1 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n        '======';\n    } else if (remain === 2) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n        '====';\n    } else if (remain === 3) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n        '===';\n    } else if (remain === 4) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n        '=';\n    }\n    return base32Str;\n  };\n\n  var encodeUtf8 = function (str) {\n    var v1, v2, v3, v4, v5, code, end = false, base32Str = '',\n      index = 0, i, start = 0, bytes = 0, length = str.length;\n      if (str === '') {\n        return base32Str;\n      }\n    do {\n      blocks[0] = blocks[5];\n      blocks[1] = blocks[6];\n      blocks[2] = blocks[7];\n      for (i = start; index < length && i < 5; ++index) {\n        code = str.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i++] = code;\n        } else if (code < 0x800) {\n          blocks[i++] = 0xc0 | (code >> 6);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i++] = 0xe0 | (code >> 12);\n          blocks[i++] = 0x80 | ((code >> 6) & 0x3f);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++index) & 0x3ff));\n          blocks[i++] = 0xf0 | (code >> 18);\n          blocks[i++] = 0x80 | ((code >> 12) & 0x3f);\n          blocks[i++] = 0x80 | ((code >> 6) & 0x3f);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        }\n      }\n      bytes += i - start;\n      start = i - 5;\n      if (index === length) {\n        ++index;\n      }\n      if (index > length && i < 6) {\n        end = true;\n      }\n      v1 = blocks[0];\n      if (i > 4) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        v5 = blocks[4];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n          BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n          BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n          BASE32_ENCODE_CHAR[v5 & 31];\n      } else if (i === 1) {\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n          '======';\n      } else if (i === 2) {\n        v2 = blocks[1];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n          '====';\n      } else if (i === 3) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n          '===';\n      } else {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n          BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n          BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n          '=';\n      }\n    } while (!end);\n    return base32Str;\n  };\n\n  var encodeBytes = function (bytes) {\n    var v1, v2, v3, v4, v5, base32Str = '', length = bytes.length;\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i++];\n      v5 = bytes[i++];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n        BASE32_ENCODE_CHAR[v5 & 31];\n    }\n\n    // remain char\n    var remain = length - count;\n    if (remain === 1) {\n      v1 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n        '======';\n    } else if (remain === 2) {\n      v1 = bytes[i++];\n      v2 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n        '====';\n    } else if (remain === 3) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n        '===';\n    } else if (remain === 4) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n        '=';\n    }\n    return base32Str;\n  };\n\n  var encode = function (input, asciiOnly) {\n    var notString = typeof(input) !== 'string';\n    if (notString && input.constructor === ArrayBuffer) {\n      input = new Uint8Array(input);\n    }\n    if (notString) {\n      return encodeBytes(input);\n    } else if (asciiOnly) {\n      return encodeAscii(input);\n    } else {\n      return encodeUtf8(input);\n    }\n  };\n\n  var decode = function (base32Str, asciiOnly) {\n    if (!asciiOnly) {\n      return toUtf8String(decodeAsBytes(base32Str));\n    }\n    if (base32Str === '') {\n      return '';\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n    var v1, v2, v3, v4, v5, v6, v7, v8, str = '', length = base32Str.indexOf('=');\n    if (length === -1) {\n      length = base32Str.length;\n    }\n\n    // 8 char to 5 bytes\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) +\n        String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) +\n        String.fromCharCode((v7 << 5 | v8) & 255);\n    }\n\n    // remain bytes\n    var remain = length - count;\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) +\n        String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);\n    }\n    return str;\n  };\n\n  var exports = {\n    encode: encode,\n    decode: decode\n  };\n  decode.asBytes = decodeAsBytes;\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.base32 = exports;\n    if (AMD) {\n      define(function() {\n        return exports;\n      });\n    }\n  }\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}