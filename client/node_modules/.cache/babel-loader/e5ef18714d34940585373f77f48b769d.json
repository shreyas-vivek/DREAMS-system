{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst {\n  ensureMultiaddr\n} = require('./utils');\n\nconst MultiaddrSet = require('./multiaddr-set');\n\nconst assert = require('assert'); // Peer represents a peer on the IPFS network\n\n\nclass PeerInfo {\n  constructor(peerId) {\n    assert(peerId, 'Missing peerId. Use Peer.create(cb) to create one');\n    this.id = peerId;\n    this.multiaddrs = new MultiaddrSet();\n    this.protocols = new Set();\n    this._connectedMultiaddr = undefined;\n  } // only stores the current multiaddr being used\n\n\n  connect(ma) {\n    ma = ensureMultiaddr(ma);\n\n    if (!this.multiaddrs.has(ma) && ma.toString() !== `/ipfs/${this.id.toB58String()}`) {\n      throw new Error('can\\'t be connected to missing multiaddr from set');\n    }\n\n    this._connectedMultiaddr = ma;\n  }\n\n  disconnect() {\n    this._connectedMultiaddr = undefined;\n  }\n\n  isConnected() {\n    return this._connectedMultiaddr;\n  }\n\n}\n\nPeerInfo.create = (peerId, callback) => {\n  if (typeof peerId === 'function') {\n    callback = peerId;\n    peerId = null;\n    PeerId.create((err, id) => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, new PeerInfo(id));\n    });\n    return;\n  } // Already a PeerId instance\n\n\n  if (typeof peerId.toJSON === 'function') {\n    callback(null, new PeerInfo(peerId));\n  } else {\n    PeerId.createFromJSON(peerId, (err, id) => callback(err, new PeerInfo(id)));\n  }\n};\n\nPeerInfo.isPeerInfo = peerInfo => {\n  return Boolean(typeof peerInfo === 'object' && peerInfo.id && peerInfo.multiaddrs);\n};\n\nmodule.exports = PeerInfo;","map":{"version":3,"names":["PeerId","require","ensureMultiaddr","MultiaddrSet","assert","PeerInfo","constructor","peerId","id","multiaddrs","protocols","Set","_connectedMultiaddr","undefined","connect","ma","has","toString","toB58String","Error","disconnect","isConnected","create","callback","err","toJSON","createFromJSON","isPeerInfo","peerInfo","Boolean","module","exports"],"sources":["C:/Users/Shreyas/Desktop/DREAMS/DMR-master/DREAMS-system/client/node_modules/peer-info/src/index.js"],"sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst { ensureMultiaddr } = require('./utils')\nconst MultiaddrSet = require('./multiaddr-set')\nconst assert = require('assert')\n\n// Peer represents a peer on the IPFS network\nclass PeerInfo {\n  constructor (peerId) {\n    assert(peerId, 'Missing peerId. Use Peer.create(cb) to create one')\n\n    this.id = peerId\n    this.multiaddrs = new MultiaddrSet()\n    this.protocols = new Set()\n    this._connectedMultiaddr = undefined\n  }\n\n  // only stores the current multiaddr being used\n  connect (ma) {\n    ma = ensureMultiaddr(ma)\n    if (!this.multiaddrs.has(ma) && ma.toString() !== `/ipfs/${this.id.toB58String()}`) {\n      throw new Error('can\\'t be connected to missing multiaddr from set')\n    }\n    this._connectedMultiaddr = ma\n  }\n\n  disconnect () {\n    this._connectedMultiaddr = undefined\n  }\n\n  isConnected () {\n    return this._connectedMultiaddr\n  }\n}\n\nPeerInfo.create = (peerId, callback) => {\n  if (typeof peerId === 'function') {\n    callback = peerId\n    peerId = null\n\n    PeerId.create((err, id) => {\n      if (err) {\n        return callback(err)\n      }\n\n      callback(null, new PeerInfo(id))\n    })\n    return\n  }\n\n  // Already a PeerId instance\n  if (typeof peerId.toJSON === 'function') {\n    callback(null, new PeerInfo(peerId))\n  } else {\n    PeerId.createFromJSON(peerId, (err, id) => callback(err, new PeerInfo(id)))\n  }\n}\n\nPeerInfo.isPeerInfo = (peerInfo) => {\n  return Boolean(typeof peerInfo === 'object' &&\n    peerInfo.id &&\n    peerInfo.multiaddrs)\n}\n\nmodule.exports = PeerInfo\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAsBD,OAAO,CAAC,SAAD,CAAnC;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB,C,CAEA;;;AACA,MAAMI,QAAN,CAAe;EACbC,WAAW,CAAEC,MAAF,EAAU;IACnBH,MAAM,CAACG,MAAD,EAAS,mDAAT,CAAN;IAEA,KAAKC,EAAL,GAAUD,MAAV;IACA,KAAKE,UAAL,GAAkB,IAAIN,YAAJ,EAAlB;IACA,KAAKO,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;IACA,KAAKC,mBAAL,GAA2BC,SAA3B;EACD,CARY,CAUb;;;EACAC,OAAO,CAAEC,EAAF,EAAM;IACXA,EAAE,GAAGb,eAAe,CAACa,EAAD,CAApB;;IACA,IAAI,CAAC,KAAKN,UAAL,CAAgBO,GAAhB,CAAoBD,EAApB,CAAD,IAA4BA,EAAE,CAACE,QAAH,OAAmB,SAAQ,KAAKT,EAAL,CAAQU,WAAR,EAAsB,EAAjF,EAAoF;MAClF,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;IACD;;IACD,KAAKP,mBAAL,GAA2BG,EAA3B;EACD;;EAEDK,UAAU,GAAI;IACZ,KAAKR,mBAAL,GAA2BC,SAA3B;EACD;;EAEDQ,WAAW,GAAI;IACb,OAAO,KAAKT,mBAAZ;EACD;;AAzBY;;AA4BfP,QAAQ,CAACiB,MAAT,GAAkB,CAACf,MAAD,EAASgB,QAAT,KAAsB;EACtC,IAAI,OAAOhB,MAAP,KAAkB,UAAtB,EAAkC;IAChCgB,QAAQ,GAAGhB,MAAX;IACAA,MAAM,GAAG,IAAT;IAEAP,MAAM,CAACsB,MAAP,CAAc,CAACE,GAAD,EAAMhB,EAAN,KAAa;MACzB,IAAIgB,GAAJ,EAAS;QACP,OAAOD,QAAQ,CAACC,GAAD,CAAf;MACD;;MAEDD,QAAQ,CAAC,IAAD,EAAO,IAAIlB,QAAJ,CAAaG,EAAb,CAAP,CAAR;IACD,CAND;IAOA;EACD,CAbqC,CAetC;;;EACA,IAAI,OAAOD,MAAM,CAACkB,MAAd,KAAyB,UAA7B,EAAyC;IACvCF,QAAQ,CAAC,IAAD,EAAO,IAAIlB,QAAJ,CAAaE,MAAb,CAAP,CAAR;EACD,CAFD,MAEO;IACLP,MAAM,CAAC0B,cAAP,CAAsBnB,MAAtB,EAA8B,CAACiB,GAAD,EAAMhB,EAAN,KAAae,QAAQ,CAACC,GAAD,EAAM,IAAInB,QAAJ,CAAaG,EAAb,CAAN,CAAnD;EACD;AACF,CArBD;;AAuBAH,QAAQ,CAACsB,UAAT,GAAuBC,QAAD,IAAc;EAClC,OAAOC,OAAO,CAAC,OAAOD,QAAP,KAAoB,QAApB,IACbA,QAAQ,CAACpB,EADI,IAEboB,QAAQ,CAACnB,UAFG,CAAd;AAGD,CAJD;;AAMAqB,MAAM,CAACC,OAAP,GAAiB1B,QAAjB"},"metadata":{},"sourceType":"script"}