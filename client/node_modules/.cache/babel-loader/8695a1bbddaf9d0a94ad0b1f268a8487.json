{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nmodule.exports = send => {\n  return promisify((key, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    function handleResult(done, err, res) {\n      if (err) {\n        return done(err);\n      }\n\n      if (!res) {\n        return done(new Error('empty response'));\n      }\n\n      if (res.length === 0) {\n        return done(new Error('no value returned for key'));\n      } // Inconsistent return values in the browser vs node\n\n\n      if (Array.isArray(res)) {\n        res = res[0];\n      }\n\n      if (res.Type === 5) {\n        done(null, res.Extra);\n      } else {\n        let error = new Error('key was not found (type 6)');\n        done(error);\n      }\n    }\n\n    send({\n      path: 'dht/get',\n      args: key,\n      qs: opts\n    }, handleResult.bind(null, callback));\n  });\n};","map":{"version":3,"names":["promisify","require","module","exports","send","key","opts","callback","handleResult","done","err","res","Error","length","Array","isArray","Type","Extra","error","path","args","qs","bind"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipfs-http-client/src/dht/get.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\n\nmodule.exports = (send) => {\n  return promisify((key, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    function handleResult (done, err, res) {\n      if (err) {\n        return done(err)\n      }\n      if (!res) {\n        return done(new Error('empty response'))\n      }\n      if (res.length === 0) {\n        return done(new Error('no value returned for key'))\n      }\n\n      // Inconsistent return values in the browser vs node\n      if (Array.isArray(res)) {\n        res = res[0]\n      }\n\n      if (res.Type === 5) {\n        done(null, res.Extra)\n      } else {\n        let error = new Error('key was not found (type 6)')\n        done(error)\n      }\n    }\n\n    send({\n      path: 'dht/get',\n      args: key,\n      qs: opts\n    }, handleResult.bind(null, callback))\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,OAAOJ,SAAS,CAAC,CAACK,GAAD,EAAMC,IAAN,EAAYC,QAAZ,KAAyB;IACxC,IAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;MAC3CA,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD,CAJuC,CAMxC;IACA;;;IACA,IAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;MAChEA,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IAED,SAASE,YAAT,CAAuBC,IAAvB,EAA6BC,GAA7B,EAAkCC,GAAlC,EAAuC;MACrC,IAAID,GAAJ,EAAS;QACP,OAAOD,IAAI,CAACC,GAAD,CAAX;MACD;;MACD,IAAI,CAACC,GAAL,EAAU;QACR,OAAOF,IAAI,CAAC,IAAIG,KAAJ,CAAU,gBAAV,CAAD,CAAX;MACD;;MACD,IAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;QACpB,OAAOJ,IAAI,CAAC,IAAIG,KAAJ,CAAU,2BAAV,CAAD,CAAX;MACD,CAToC,CAWrC;;;MACA,IAAIE,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;QACtBA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT;MACD;;MAED,IAAIA,GAAG,CAACK,IAAJ,KAAa,CAAjB,EAAoB;QAClBP,IAAI,CAAC,IAAD,EAAOE,GAAG,CAACM,KAAX,CAAJ;MACD,CAFD,MAEO;QACL,IAAIC,KAAK,GAAG,IAAIN,KAAJ,CAAU,4BAAV,CAAZ;QACAH,IAAI,CAACS,KAAD,CAAJ;MACD;IACF;;IAEDd,IAAI,CAAC;MACHe,IAAI,EAAE,SADH;MAEHC,IAAI,EAAEf,GAFH;MAGHgB,EAAE,EAAEf;IAHD,CAAD,EAIDE,YAAY,CAACc,IAAb,CAAkB,IAAlB,EAAwBf,QAAxB,CAJC,CAAJ;EAKD,CA1Ce,CAAhB;AA2CD,CA5CD"},"metadata":{},"sourceType":"script"}