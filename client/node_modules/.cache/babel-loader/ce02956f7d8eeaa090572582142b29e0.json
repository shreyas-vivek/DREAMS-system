{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shreyas\\\\Desktop\\\\DREAMS\\\\DMR-master\\\\DREAMS-system\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useCallback, useEffect } from 'react';\nimport Web3 from 'web3';\nimport EthContext from './EthContext';\nimport { reducer, actions, initialState } from './state';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EthProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      const web3 = new Web3(Web3.givenProvider || 'ws://localhost:8545');\n      const accounts = await web3.eth.requestAccounts();\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contract;\n\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n      } catch (err) {\n        console.error(err);\n      }\n\n      let role = 'unknown';\n\n      if (contract && accounts) {\n        role = await contract.methods.getSenderRole().call({\n          from: accounts[0]\n        });\n      }\n\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract,\n          role,\n          loading: false\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require('../../contracts/EHR.json');\n\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    const events = ['chainChanged', 'accountsChanged'];\n\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EthProvider, \"hc888FM+IczqCNE4rWyvjI+TMdU=\");\n\n_c = EthProvider;\nexport default EthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","Web3","EthContext","reducer","actions","initialState","EthProvider","children","state","dispatch","init","artifact","web3","givenProvider","accounts","eth","requestAccounts","networkID","net","getId","abi","address","contract","networks","Contract","err","console","error","role","methods","getSenderRole","call","from","type","data","loading","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener"],"sources":["C:/Users/Shreyas/Desktop/DREAMS/DMR-master/DREAMS-system/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect } from 'react'\nimport Web3 from 'web3'\nimport EthContext from './EthContext'\nimport { reducer, actions, initialState } from './state'\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      const web3 = new Web3(Web3.givenProvider || 'ws://localhost:8545')\n      const accounts = await web3.eth.requestAccounts()\n      const networkID = await web3.eth.net.getId()\n      const { abi } = artifact\n      let address, contract\n      try {\n        address = artifact.networks[networkID].address\n        contract = new web3.eth.Contract(abi, address)\n      } catch (err) {\n        console.error(err)\n      }\n\n      let role = 'unknown'\n      if (contract && accounts) {\n        role = await contract.methods.getSenderRole().call({ from: accounts[0] })\n      }\n      dispatch({\n        type: actions.init,\n        data: { artifact, web3, accounts, networkID, contract, role, loading: false },\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require('../../contracts/EHR.json')\n        init(artifact)\n      } catch (err) {\n        console.error(err)\n      }\n    }\n\n    tryInit()\n  }, [init])\n\n  useEffect(() => {\n    const events = ['chainChanged', 'accountsChanged']\n    const handleChange = () => {\n      init(state.artifact)\n    }\n\n    events.forEach(e => window.ethereum.on(e, handleChange))\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange))\n    }\n  }, [init, state.artifact])\n\n  return (\n    <EthContext.Provider\n      value={{\n        state,\n        dispatch,\n      }}\n    >\n      {children}\n    </EthContext.Provider>\n  )\n}\n\nexport default EthProvider\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}