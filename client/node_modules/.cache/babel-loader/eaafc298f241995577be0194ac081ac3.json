{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst withIs = require('class-is');\n\nconst addNamedLink = require('./addNamedLink');\n\nconst visibility = require('../visibility');\n\nclass DAGNode {\n  constructor(data, links, serializedSize) {\n    if (serializedSize !== 0) {\n      assert(serializedSize, 'A DAGNode requires it\\'s serialized size');\n    }\n\n    this._data = data || Buffer.alloc(0);\n    this._links = links;\n    this._serializedSize = serializedSize; // Make sure we have a nice public API that can be used by an IPLD resolver\n\n    visibility.hidePrivateFields(this);\n    visibility.addEnumerableGetters(this, ['Data', 'Links']); // Add getters for existing links by the name of the link\n    // This is how paths are traversed in IPFS. Links with names won't\n    // override existing fields like `data` or `links`.\n\n    links.forEach((link, position) => {\n      addNamedLink(this, link.Name, position);\n    });\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this._links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return `DAGNode <data: \"${this.Data.toString('base64')}\", links: ${this.Links.length}, size: ${this.size}>`;\n  }\n\n  get size() {\n    if (this._size === undefined) {\n      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  } // Getters for backwards compatible path resolving\n\n\n  get Data() {\n    return this._data;\n  }\n\n  set Data(_) {\n    throw new Error(\"Can't set property: 'Data' is immutable\");\n  }\n\n  get Links() {\n    return this._links.map(link => {\n      return {\n        Name: link.Name,\n        Tsize: link.Tsize,\n        Hash: link.Hash\n      };\n    });\n  }\n\n  set Links(_) {\n    throw new Error(\"Can't set property: 'Links' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});\nexports.create = require('./create');\nexports.clone = require('./clone');\nexports.addLink = require('./addLink');\nexports.rmLink = require('./rmLink');","map":{"version":3,"names":["assert","require","withIs","addNamedLink","visibility","DAGNode","constructor","data","links","serializedSize","_data","Buffer","alloc","_links","_serializedSize","hidePrivateFields","addEnumerableGetters","forEach","link","position","Name","toJSON","_json","Object","freeze","Data","map","l","size","assign","toString","Links","length","_size","undefined","reduce","sum","Tsize","Error","_","Hash","exports","module","className","symbolName","create","clone","addLink","rmLink"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipld-dag-pb/src/dag-node/index.js"],"sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst addNamedLink = require('./addNamedLink')\nconst visibility = require('../visibility')\n\nclass DAGNode {\n  constructor (data, links, serializedSize) {\n    if (serializedSize !== 0) {\n      assert(serializedSize, 'A DAGNode requires it\\'s serialized size')\n    }\n\n    this._data = data || Buffer.alloc(0)\n    this._links = links\n    this._serializedSize = serializedSize\n\n    // Make sure we have a nice public API that can be used by an IPLD resolver\n    visibility.hidePrivateFields(this)\n    visibility.addEnumerableGetters(this, ['Data', 'Links'])\n\n    // Add getters for existing links by the name of the link\n    // This is how paths are traversed in IPFS. Links with names won't\n    // override existing fields like `data` or `links`.\n    links.forEach((link, position) => {\n      addNamedLink(this, link.Name, position)\n    })\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this._links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${this.Data.toString('base64')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  get size () {\n    if (this._size === undefined) {\n      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  // Getters for backwards compatible path resolving\n  get Data () {\n    return this._data\n  }\n  set Data (_) {\n    throw new Error(\"Can't set property: 'Data' is immutable\")\n  }\n  get Links () {\n    return this._links.map((link) => {\n      return {\n        Name: link.Name,\n        Tsize: link.Tsize,\n        Hash: link.Hash\n      }\n    })\n  }\n  set Links (_) {\n    throw new Error(\"Can't set property: 'Links' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\nexports.create = require('./create')\nexports.clone = require('./clone')\nexports.addLink = require('./addLink')\nexports.rmLink = require('./rmLink')\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}