{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst streamToValue = require('../utils/stream-to-value');\n\nconst CID = require('cids');\n\nconst LRU = require('lru-cache');\n\nconst lruOptions = {\n  max: 128\n};\nconst cache = new LRU(lruOptions);\n\nmodule.exports = send => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    let cidB58Str;\n\n    try {\n      cid = new CID(cid);\n      cidB58Str = cid.toBaseEncodedString();\n    } catch (err) {\n      return callback(err);\n    }\n\n    const node = cache.get(cidB58Str);\n\n    if (node) {\n      return callback(null, node.data);\n    }\n\n    send({\n      path: 'object/data',\n      args: cidB58Str\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (typeof result.pipe === 'function') {\n        streamToValue(result, callback);\n      } else {\n        callback(null, result);\n      }\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","streamToValue","CID","LRU","lruOptions","max","cache","module","exports","send","cid","options","callback","cidB58Str","toBaseEncodedString","err","node","get","data","path","args","result","pipe"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipfs-http-client/src/object/data.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValue = require('../utils/stream-to-value')\nconst CID = require('cids')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = new LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    if (!options) {\n      options = {}\n    }\n\n    let cidB58Str\n\n    try {\n      cid = new CID(cid)\n      cidB58Str = cid.toBaseEncodedString()\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(cidB58Str)\n\n    if (node) {\n      return callback(null, node.data)\n    }\n\n    send({\n      path: 'object/data',\n      args: cidB58Str\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      if (typeof result.pipe === 'function') {\n        streamToValue(result, callback)\n      } else {\n        callback(null, result)\n      }\n    })\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,0BAAD,CAA7B;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMI,UAAU,GAAG;EACjBC,GAAG,EAAE;AADY,CAAnB;AAIA,MAAMC,KAAK,GAAG,IAAIH,GAAJ,CAAQC,UAAR,CAAd;;AAEAG,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,OAAOV,SAAS,CAAC,CAACW,GAAD,EAAMC,OAAN,EAAeC,QAAf,KAA4B;IAC3C,IAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;MACjCC,QAAQ,GAAGD,OAAX;MACAA,OAAO,GAAG,EAAV;IACD;;IACD,IAAI,CAACA,OAAL,EAAc;MACZA,OAAO,GAAG,EAAV;IACD;;IAED,IAAIE,SAAJ;;IAEA,IAAI;MACFH,GAAG,GAAG,IAAIR,GAAJ,CAAQQ,GAAR,CAAN;MACAG,SAAS,GAAGH,GAAG,CAACI,mBAAJ,EAAZ;IACD,CAHD,CAGE,OAAOC,GAAP,EAAY;MACZ,OAAOH,QAAQ,CAACG,GAAD,CAAf;IACD;;IAED,MAAMC,IAAI,GAAGV,KAAK,CAACW,GAAN,CAAUJ,SAAV,CAAb;;IAEA,IAAIG,IAAJ,EAAU;MACR,OAAOJ,QAAQ,CAAC,IAAD,EAAOI,IAAI,CAACE,IAAZ,CAAf;IACD;;IAEDT,IAAI,CAAC;MACHU,IAAI,EAAE,aADH;MAEHC,IAAI,EAAEP;IAFH,CAAD,EAGD,CAACE,GAAD,EAAMM,MAAN,KAAiB;MAClB,IAAIN,GAAJ,EAAS;QACP,OAAOH,QAAQ,CAACG,GAAD,CAAf;MACD;;MAED,IAAI,OAAOM,MAAM,CAACC,IAAd,KAAuB,UAA3B,EAAuC;QACrCrB,aAAa,CAACoB,MAAD,EAAST,QAAT,CAAb;MACD,CAFD,MAEO;QACLA,QAAQ,CAAC,IAAD,EAAOS,MAAP,CAAR;MACD;IACF,CAbG,CAAJ;EAcD,CAtCe,CAAhB;AAuCD,CAxCD"},"metadata":{},"sourceType":"script"}