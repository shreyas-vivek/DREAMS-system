{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nconst multiaddr = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nconst errcode = require('err-code');\n\nmodule.exports = send => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res.find(r => r.Type === 2);\n      } // Type 2 keys\n      // 2 = FinalPeer\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n\n\n      if (!res || res.Type !== 2) {\n        const errMsg = `key was not found (type 4)`;\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'));\n      }\n\n      const responseReceived = res.Responses[0];\n      const peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID));\n      responseReceived.Addrs.forEach(addr => {\n        const ma = multiaddr(addr);\n        peerInfo.multiaddrs.add(ma);\n      });\n      callback(null, peerInfo);\n    };\n\n    send({\n      path: 'dht/findpeer',\n      args: peerId.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","streamToValueWithTransformer","multiaddr","PeerId","PeerInfo","errcode","module","exports","send","peerId","opts","callback","handleResult","res","Array","isArray","find","r","Type","errMsg","Error","responseReceived","Responses","peerInfo","createFromB58String","ID","Addrs","forEach","addr","ma","multiaddrs","add","path","args","toString","qs","err","result"],"sources":["C:/Users/Shreyas/Desktop/DMR-master/client/node_modules/ipfs-http-client/src/dht/findpeer.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst errcode = require('err-code')\n\nmodule.exports = (send) => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res.find(r => r.Type === 2)\n      }\n\n      // Type 2 keys\n      // 2 = FinalPeer\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n      if (!res || res.Type !== 2) {\n        const errMsg = `key was not found (type 4)`\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'))\n      }\n\n      const responseReceived = res.Responses[0]\n      const peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID))\n\n      responseReceived.Addrs.forEach((addr) => {\n        const ma = multiaddr(addr)\n\n        peerInfo.multiaddrs.add(ma)\n      })\n\n      callback(null, peerInfo)\n    }\n\n    send({\n      path: 'dht/findpeer',\n      args: peerId.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAAD,CAA5C;;AAEA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AAEAM,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,OAAOT,SAAS,CAAC,CAACU,MAAD,EAASC,IAAT,EAAeC,QAAf,KAA4B;IAC3C,IAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;MAC3CA,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD,CAJ0C,CAM3C;IACA;;;IACA,IAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;MAChEA,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IAED,MAAME,YAAY,GAAG,CAACC,GAAD,EAAMF,QAAN,KAAmB;MACtC;MACA,IAAIG,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;QACtBA,GAAG,GAAGA,GAAG,CAACG,IAAJ,CAASC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,CAAzB,CAAN;MACD,CAJqC,CAMtC;MACA;MACA;;;MACA,IAAI,CAACL,GAAD,IAAQA,GAAG,CAACK,IAAJ,KAAa,CAAzB,EAA4B;QAC1B,MAAMC,MAAM,GAAI,4BAAhB;QACA,OAAOR,QAAQ,CAACN,OAAO,CAAC,IAAIe,KAAJ,CAAUD,MAAV,CAAD,EAAoB,0BAApB,CAAR,CAAf;MACD;;MAED,MAAME,gBAAgB,GAAGR,GAAG,CAACS,SAAJ,CAAc,CAAd,CAAzB;MACA,MAAMC,QAAQ,GAAG,IAAInB,QAAJ,CAAaD,MAAM,CAACqB,mBAAP,CAA2BH,gBAAgB,CAACI,EAA5C,CAAb,CAAjB;MAEAJ,gBAAgB,CAACK,KAAjB,CAAuBC,OAAvB,CAAgCC,IAAD,IAAU;QACvC,MAAMC,EAAE,GAAG3B,SAAS,CAAC0B,IAAD,CAApB;QAEAL,QAAQ,CAACO,UAAT,CAAoBC,GAApB,CAAwBF,EAAxB;MACD,CAJD;MAMAlB,QAAQ,CAAC,IAAD,EAAOY,QAAP,CAAR;IACD,CAxBD;;IA0BAf,IAAI,CAAC;MACHwB,IAAI,EAAE,cADH;MAEHC,IAAI,EAAExB,MAAM,CAACyB,QAAP,EAFH;MAGHC,EAAE,EAAEzB;IAHD,CAAD,EAID,CAAC0B,GAAD,EAAMC,MAAN,KAAiB;MAClB,IAAID,GAAJ,EAAS;QACP,OAAOzB,QAAQ,CAACyB,GAAD,CAAf;MACD;;MAEDnC,4BAA4B,CAACoC,MAAD,EAASzB,YAAT,EAAuBD,QAAvB,CAA5B;IACD,CAVG,CAAJ;EAWD,CAlDe,CAAhB;AAmDD,CApDD"},"metadata":{},"sourceType":"script"}